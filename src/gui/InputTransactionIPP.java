/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.*;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Control;
import org.openide.util.Exceptions;
import pelajar.Level;
import pelajar.Profil;
import printout.TunggakanBean;
import sak.KasirException;

/**
 *
 * @author Master
 */
public class InputTransactionIPP extends javax.swing.JFrame {
    Profil profil;
    private TableModel tableModelIPP;
    private IPP ippFromDB;
    private List<Integer> tahunIPP;
    private ArrayList<Float> iDDAmounts;
    public ArrayList<Float> beasiswaAmounts;
    public ArrayList<Float> beasiswaCostAmounts;
    public ArrayList<Float> iPPAmounts;
    private IPP ippCurrent;
    private IPP ippStoreToDB;
    private float ippDebt;
    private IDD idd;
    private InputTransactionFrameSeparated itfs;
    private final String[] namaBulan = {"JULI", "AGUSTUS", "SEPTEMBER", "OKTOBER", "NOPEMBER", "DESEMBER", "JANUARI", "PEBRUARI", "MARET", "APRIL", "MEI", "JUNI"};
    private float unpaidIPP;
    private ComboBoxModel tahunComboBoxModel;
    private String tunggakanIPPString = new String("");
    private String tunggakanIPPEachAmountString = new String("");
    /**
     * Creates new form InputTransactionIPP
     */
    
    public InputTransactionIPP(Profil profil, InputTransactionFrameSeparated itfs) {
        this.profil = profil;
        this.itfs = itfs;
        try {
            tableModelIPP = buildIPPTableModel(profil, profil.currentLevel.tahun);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelIPP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelTahun = new javax.swing.JLabel();
        jComboBoxTahun = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jUnpaidIPP = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableIPP = new javax.swing.JTable();
        jButtonBayarIPP = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jFormattedTextFieldIDDSaldo = new javax.swing.JFormattedTextField();
        jTextFieldIPPDebt = new javax.swing.JFormattedTextField();

        setTitle(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.title")); // NOI18N

        jPanelIPP.setMinimumSize(new java.awt.Dimension(570, 380));
        jPanelIPP.setPreferredSize(new java.awt.Dimension(680, 450));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.jLabel1.text")); // NOI18N

        jLabelTahun.setText(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.jLabelTahun.text")); // NOI18N

        try{
            tahunComboBoxModel = buildIPPtahunComboBoxModel(profil);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }
        jComboBoxTahun.setModel(tahunComboBoxModel);
        jComboBoxTahun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTahunActionPerformed(evt);
            }
        });
        jComboBoxTahun.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxTahunPropertyChange(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.jLabel2.text")); // NOI18N

        jUnpaidIPP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jUnpaidIPP.setText(String.valueOf(unpaidIPP));
        jUnpaidIPP.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jUnpaidIPP.setEnabled(false);

        jTableIPP.setModel(tableModelIPP);
        jTableIPP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableIPP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableIPPFocusLost(evt);
            }
        });
        jTableIPP.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableIPPPropertyChange(evt);
            }
        });
        jScrollPane5.setViewportView(jTableIPP);

        jButtonBayarIPP.setText(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.jButtonBayarIPP.text")); // NOI18N
        jButtonBayarIPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBayarIPPActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.jLabel3.text")); // NOI18N

        jFormattedTextFieldIDDSaldo.setText(org.openide.util.NbBundle.getMessage(InputTransactionIPP.class, "InputTransactionIPP.jFormattedTextFieldIDDSaldo.text")); // NOI18N
        jFormattedTextFieldIDDSaldo.setEnabled(false);

        jTextFieldIPPDebt.setEditable(false);
        jTextFieldIPPDebt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));

        javax.swing.GroupLayout jPanelIPPLayout = new javax.swing.GroupLayout(jPanelIPP);
        jPanelIPP.setLayout(jPanelIPPLayout);
        jPanelIPPLayout.setHorizontalGroup(
            jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPLayout.createSequentialGroup()
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIPPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5))
                    .addGroup(jPanelIPPLayout.createSequentialGroup()
                        .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelIPPLayout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(jButtonBayarIPP))
                            .addGroup(jPanelIPPLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(29, 29, 29)
                                .addComponent(jLabelTahun)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxTahun, 0, 101, Short.MAX_VALUE)
                                    .addComponent(jTextFieldIPPDebt))
                                .addGap(82, 82, 82)
                                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jUnpaidIPP, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                    .addComponent(jFormattedTextFieldIDDSaldo))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelIPPLayout.setVerticalGroup(
            jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTahun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTahun)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jUnpaidIPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextFieldIDDSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldIPPDebt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBayarIPP)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelIPP, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelIPP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxTahunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTahunActionPerformed
        // TODO add your handling code here:
        try {
            this.tableModelIPP = (DefaultTableModel) buildIPPTableModel(this.profil, this.tahunIPP.get(jComboBoxTahun.getSelectedIndex()));
            jTableIPP.setModel(this.tableModelIPP);
            jTextFieldIPPDebt.setValue(ippDebt);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (KasirException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxTahunActionPerformed

    private void jComboBoxTahunPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxTahunPropertyChange
        // TODO add your handling code here:
        try {
            if (this.jComboBoxTahun.getSelectedItem() != null) {
                this.tableModelIPP = (DefaultTableModel) buildIPPTableModel(this.profil, this.tahunIPP.get(jComboBoxTahun.getSelectedIndex()));
                jTableIPP.setModel(this.tableModelIPP);
                jTextFieldIPPDebt.setValue(ippDebt);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Koneksi Error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            JOptionPane.showMessageDialog(rootPane, "IPP Belum Di Setting!\r\n".concat(ex.toString()));
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxTahunPropertyChange

    private void jTableIPPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableIPPFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableIPPFocusLost

    private void jTableIPPPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableIPPPropertyChange
        // TODO add your handling code here:
        //IDD, Beasiswa, Beasiswa Cost
        iPPAmounts = new ArrayList();
        iDDAmounts = new ArrayList();
        beasiswaAmounts = new ArrayList();
        beasiswaCostAmounts = new ArrayList();
        /////BLOOOOOOOOOOM SELESAIIIIIIIIIIIIIIIIIIII
        int i = 0;
        ippCurrent = new IPP();
        ippStoreToDB = new IPP();
        ArrayList<Entry> entry = new ArrayList<>();
        if (ippFromDB.entries.size() != 0) {
            for (i = 0; i < jTableIPP.getRowCount(); i++) {
                ippCurrent.entries.add((Boolean) jTableIPP.getValueAt(i, 2) ? ((ippFromDB.entries.get(i).transactDetailIDs.size() > 0) ? new Entry(i, ippFromDB.entries.get(i).amount, ippFromDB.entries.get(i).debt, ippFromDB.entries.get(i).transactDetailIDs) : new Entry(i, ippFromDB.entries.get(i).amount)) : null);
                //below condition is when jTableIPP checkBox is UNCHECK ????
                if (ippCurrent.entries.get(i) == null) {
                    ippStoreToDB.entries.add(null);
                    jTableIPP.setValueAt(0f, i, 3);
                    jTableIPP.setValueAt(0f, i, 4);
                    jTableIPP.setValueAt(0f, i, 5);
                    jTableIPP.setValueAt(0f, i, 6);
                    iPPAmounts.add(0f);
                    iDDAmounts.add(0f);
                    beasiswaAmounts.add(0f);
                    beasiswaCostAmounts.add(0f);
                    //below is when jTableIPP property changed, especially check box is Changed or Editing IDD, Beasiswa, Beasiswa Cost 
                } else if ((ippCurrent.entries.get(i) != null) ^ (ippFromDB.entries.get(i).transactDetailIDs.size() > 0)) {
                    System.out.println("IDD dari db ");
                    if (idd != null) {
                        System.out.println(idd.amount);
                    }
                    iPPAmounts.add((Float) jTableIPP.getModel().getValueAt(i,3));
                    iDDAmounts.add((Float) jTableIPP.getValueAt(i, 4));
                    beasiswaAmounts.add((Float) jTableIPP.getValueAt(i, 5));
                    beasiswaCostAmounts.add((Float) jTableIPP.getValueAt(i, 6));
                    //jTableIPP.setValueAt(ippFromDB.entries.get(i).amount - (iDDAmounts.get(i) + beasiswaAmounts.get(i) + beasiswaCostAmounts.get(i)), i, 3);
                    //ippStoreToDB.entries.add(new Entry(i, ippFromDB.entries.get(i).amount));
                    ippStoreToDB.entries.add(new Entry(i, iPPAmounts.get(i)+iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i)));
                } else {
                    try {
                        if(isIPPEnough(ippFromDB.entries.get(i).transactDetailIDs, ippFromDB.entries.get(i).amount)){
                            iPPAmounts.add(0f);
                            iDDAmounts.add(0f);
                            beasiswaAmounts.add(0f);
                            beasiswaCostAmounts.add(0f);
                            ippStoreToDB.entries.add(null);
                        }else{
                            iPPAmounts.add((Float) jTableIPP.getModel().getValueAt(i,3));
                            iDDAmounts.add((Float) jTableIPP.getValueAt(i, 4));
                            beasiswaAmounts.add((Float) jTableIPP.getValueAt(i, 5));
                            beasiswaCostAmounts.add((Float) jTableIPP.getValueAt(i, 6));
                            ippStoreToDB.entries.add(new Entry(i, iPPAmounts.get(i)+iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i)));
                        }
                    } catch (SQLException ex) {
                        Exceptions.printStackTrace(ex);
                    } catch (KasirException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    

                }
                //ippCurrent.entries.add((Boolean)jTableIPP.getValueAt(i,2)? new IPP(profil.noInduk, new Level(null,null,null,(Integer)jComboBoxTahun.getSelectedItem()),entry).entries.get(i): null);
                //ippStoreToDB.entries.add(ippCurrent.entries.get(i)==null?null:(((ippCurrent.entries.get(i)!=null)^(ippFromDB.entries.get(i)!=null))? new IPP(profil.noInduk, new Level(null,null,null,(int)jComboBoxTahun.getSelectedItem()),entry).entries.get(i):ippCurrent.entries.get(i)));
                //System.out.println("IPP Period: "+ippCurrent.entries.get(i).period);
            }
        }
    }//GEN-LAST:event_jTableIPPPropertyChange

    private void jButtonBayarIPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBayarIPPActionPerformed
        // TODO add your handling code here:
        float ippAmountTemp = 0f;
        for (int i = 0; i < 12; i++) {
            if (ippStoreToDB.entries.get(i) != null) {
                //ippAmountTemp = ippAmountTemp + ippFromDB.entries.get(i).amount;
                ippAmountTemp = ippAmountTemp + (Float)jTableIPP.getModel().getValueAt(i,3)
                                +(Float)jTableIPP.getModel().getValueAt(i,4)
                                +(Float)jTableIPP.getModel().getValueAt(i,5)
                                +(Float)jTableIPP.getModel().getValueAt(i,6);
            }
        }
        itfs.jTextFieldIPPAmountSimple.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        itfs.jTextFieldIPPAmountSimple.setValue(ippAmountTemp);
        try {
            itfs.jTextFieldIPPAmountSimple.commitEdit();
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        itfs.ippCurrent = ippCurrent;
        itfs.ippFromDB = ippFromDB;
        itfs.ippStoreToDB = ippStoreToDB;
        this.setVisible(false);

    }//GEN-LAST:event_jButtonBayarIPPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new InputTransactionIPP().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBayarIPP;
    private javax.swing.JComboBox jComboBoxTahun;
    private javax.swing.JFormattedTextField jFormattedTextFieldIDDSaldo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelTahun;
    private javax.swing.JPanel jPanelIPP;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableIPP;
    private javax.swing.JFormattedTextField jTextFieldIPPDebt;
    private javax.swing.JTextField jUnpaidIPP;
    // End of variables declaration//GEN-END:variables

    public TableModel buildIPPTableModel(Profil profil, int tahun) throws SQLException, KasirException {
       String columnNames[] = {"Bulan", "Biaya IPP", "Check Box", "Tunai", "Iuran Dibayar Dimuka", "Beasiswa", "Beasiswa Yayasan"};
       Set<IPP> ippFilters = new HashSet<>();
       ArrayList<Entry> entries = new ArrayList<>();
       ippFilters.clear();
       ippFilters.add(new IPP(profil.noInduk, new Level(null,null,null,tahun), entries));
       Map<Long, IPP> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
       Object[][] data = new Object[12][7];
       int i = 0;
       final boolean[] canEdit = new boolean [12];
       ippFromDB = new IPP();
       float amountIPPinTable;
       float amountIPPinTDetail;
       ippDebt = 0f;
       
       //Get Month and Year for calculate IuranPeriodic 12 times a year (Monthly)
       Calendar calendarRunning = Calendar.getInstance();
       int targetMonth = calendarRunning.get(Calendar.MONTH);
       int targetYear = calendarRunning.get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, IPP> entry: searchResultMap.entrySet()){
            for(int j =0 ; j< entry.getValue().entries.size(); j++){
                data[j][0]= namaBulan[j];//entry.getValue().entries.get(j).period;
                data[j][1]= entry.getValue().entries.get(j).amount - calculatePaidIPP(entry.getValue().entries.get(j).transactDetailIDs); // ANEH NIH MASA BEGINI, DI KALI DUA SIH?
                amountIPPinTable = entry.getValue().entries.get(j).amount;
                if(entry.getValue().chargedLevel.tahun < targetYear){
                    ippDebt += entry.getValue().entries.get(j).debt;
                }else if(entry.getValue().chargedLevel.tahun == targetYear && j < targetMonth){
                    ippDebt += entry.getValue().entries.get(j).debt;
                }
                
                //if(jTable2 != null){data[j][2]= jTable2.getModel().getValueAt(j,2);}else{data[j][2]= new Boolean(false);}
                //if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                if(isIPPEnough(entry.getValue().entries.get(j).transactDetailIDs, amountIPPinTable)){        
//                    
                    data[j][2] = new Boolean(true);
                    Float data3 = 0f;
                    Float data4 = 0f;
                    Float data5 = 0f;
                    Float data6 = 0f;
                    
                    for(Long setTDetailIds:entry.getValue().entries.get(j).transactDetailIDs){
                        System.out.println(setTDetailIds + " Set TDetailsID");
                        if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.CASH){
                            data3 += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            data[j][3] = data3;
                        }
                        if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.IDD){
                            data4 += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            data[j][4] = data4;
                        }
                        if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA){
                            data5 += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            data[j][5] = data5;
                        }
                        if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA_COST){
                            data6 += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            data[j][6] = data6;
                        }
                    }
                    if(data[j][3] == null){
                        data[j][3] = 0f;
                    }
                    if(data[j][4] == null){
                        data[j][4] = 0f;
                    }
                    if(data[j][5] == null){
                        data[j][5] = 0f;
                    }
                    if(data[j][6] == null){
                        data[j][6] = 0f;
                    }
                            
                }else{
                    data[j][2] = new Boolean(false);
                    if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                        for(Long setTDetailIds:entry.getValue().entries.get(j).transactDetailIDs){
                            System.out.println(setTDetailIds + " Set TDetailsID");
                            if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.CASH){
                                data[j][3] = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            }
                            if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.IDD){
                                data[j][4] = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            }
                            if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA){
                                data[j][5] = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            }
                            if(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA_COST){
                                data[j][6] = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, setTDetailIds).amount;
                            }
                        }
                        if(data[j][3] == null){
                        data[j][3] = 0f;
                        }
                        if(data[j][4] == null){
                            data[j][4] = 0f;
                        }
                        if(data[j][5] == null){
                            data[j][5] = 0f;
                        }
                        if(data[j][6] == null){
                            data[j][6] = 0f;
                        }
                    }else{
                        data[j][3]=0f;
                        data[j][4]=0f;
                        data[j][5]=0f;
                        data[j][6]=0f;
                    }
                }
                
                ippFromDB.entries.add(entry.getValue().entries.get(j));
                //canEdit[j] = (entry.getValue().entries.get(j).transactDetailIDs.size() > 0);
                
                for(Long id : entry.getValue().entries.get(j).transactDetailIDs){
                    canEdit[j] = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, id).settled;
                }
                
                
            }
            ippFromDB.id = entry.getValue().id;
            ippFromDB.noInduk = entry.getValue().noInduk;
            ippFromDB.chargedLevel = entry.getValue().chargedLevel;
            i++;
            System.out.println("ipp debt "+String.valueOf(ippDebt));
        }
        TableModel tm = new DefaultTableModel(data, columnNames){
            boolean[] chooseEdit = new boolean[]{false,false,true,true,true,true,true};
            
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                if(!itfs.jDialogTransactionSummary.isVisible()){
                    if((Boolean)getValueAt(row, 2)){
                    //if((Float)getValueAt(row,1) == 0f){
                        if((column == 0 || column ==1)){
                            return column == 2;
                        //return false;
                        }
                        return !canEdit[row];
                    }
                    if((column == 0 && column ==1)|| column == 2){
                            //return column == 2;
                        return chooseEdit[column];
                    }

                    return false;
               }else{
                    return false;
                }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;
       }else{
           TableModel tm = new DefaultTableModel(data, columnNames);
           JOptionPane.showMessageDialog(rootPane, "IPP Belum Di Setting!\r\n");
           this.dispose();
           return null;
       }
       
       
    }
    public TableModel buildIPPSubmitTableModel(Profil profil, int tahun) throws SQLException, KasirException {
       String columnNames[] = {"Bulan", "Biaya IPP", "Check Box", "Tunai", "Iuran Dibayar Dimuka", "Beasiswa", "Beasiswa Yayasan"};
       Object[][] data = new Object[12][7];
       
       final boolean[] canEdit = new boolean [12];
         
        for(int i = 0 ; i < ippCurrent.entries.size(); i++){
                data[i][0]= namaBulan[i];//entry.getValue().entries.get(j).period;
                data[i][1]= ippFromDB.entries.get(i).amount; // ANEH NIH MASA BEGINI, DI KALI DUA SIH?
                if(ippCurrent.entries.get(i) != null){
//                    if(jTableIPP != null){
//                        data[j][2]=jTableIPP.getValueAt(j,2);
//                    }else{
                        data[i][2] = new Boolean(true);
//                        data[i][3] = ippFromDB.entries.get(i).amount-(iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i));
                        data[i][3] = iPPAmounts.get(i);
                        data[i][4] = iDDAmounts.get(i);
                        data[i][5] = beasiswaAmounts.get(i);
                        data[i][6] = beasiswaCostAmounts.get(i);
//                    }
                }else{
//                    if(jTableIPP !=null){
//                        data[j][2]=jTableIPP.getValueAt(j,2);
//                    }else{
                        data[i][2] = new Boolean(false);
//                        data[i][3] = ippFromDB.entries.get(i).amount-(iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i));
                        data[i][3] = iPPAmounts.get(i);
                        data[i][4] = iDDAmounts.get(i);
                        data[i][5] = beasiswaAmounts.get(i);
                        data[i][6] = beasiswaCostAmounts.get(i);
//                    }
                }
       }
       
       TableModel tm = new DefaultTableModel(data, columnNames){
            boolean[] chooseEdit = new boolean[]{false,false,true};
            
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                if(!itfs.jDialogTransactionSummary.isVisible()){
                    if((Boolean)getValueAt(row, 2)){
                        if((column == 0 || column ==1)){
                            return column == 2;
                        //return false;
                        }
                        return !canEdit[row];
                    }
                    if((column == 0 && column ==1)|| column == 2){
                            //return column == 2;
                        return chooseEdit[column];
                    }

                    return false;
               }else{
                    return false;
                }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;
    }
    
private ComboBoxModel buildIPPtahunComboBoxModel(Profil profil) throws SQLException, KasirException {
       Set<IPP> ippFilters = new HashSet<>();
       ArrayList<Entry> entries = new ArrayList();
       ippFilters.add(new IPP(profil.noInduk, null, entries));
       Map<Long, IPP> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
       this.tahunIPP = new ArrayList<>();
       List<String> tahunAjaran = new ArrayList<>();
       Object[][] data = new Object[searchResultMap.size()][12];
       int i = 0;
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, IPP> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getValue().entries.get(i);
            data[i][1]= entry.getValue().entries.get(i).amount;
            this.tahunIPP.add(entry.getValue().chargedLevel.tahun);
            tahunAjaran.add(String.valueOf(entry.getValue().chargedLevel.tahun).concat(" - ").concat(String.valueOf(entry.getValue().chargedLevel.tahun+1)));
            i++;
        }
       }
       calculateUnpaidIPP(profil, tahunIPP);
       //== bikin tunggakan beans ===
       
       
       //== end bikin tunggakan beans ===
       
       tahunComboBoxModel = new DefaultComboBoxModel(tahunAjaran.toArray());
       return tahunComboBoxModel;
    }

private float calculateUnpaidIPP(Profil profil, List<Integer> tahuns) throws SQLException, KasirException {
       Set<IPP> ippFilters = new HashSet<>();
       float retVal = 0;
       ArrayList<Entry> entries = new ArrayList<>();
       ippFilters.clear();
       int targetMonth = Calendar.getInstance().get(Calendar.MONTH);
       int targetYear = Calendar.getInstance().get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       System.out.println("Month INT: "+Calendar.getInstance().get(Calendar.MONTH));
       for(int i = 0; i< tahuns.size(); i++){
           ippFilters.add(new IPP(profil.noInduk, new Level(null,null,null,tahuns.get(i)), entries));
           
        }
       Map<Long, IPP> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
        if(searchResultMap.size() > 0){
            for(Map.Entry<Long, IPP> entry: searchResultMap.entrySet()){
                for(int j =0 ; j< entry.getValue().entries.size(); j++){
                    if((entry.getValue().entries.get(j).transactDetailIDs.isEmpty()) 
                            && ((entry.getValue().chargedLevel.tahun < targetYear)? true:(entry.getValue().entries.get(j).period <= targetMonth))){
                        retVal += entry.getValue().entries.get(j).amount;
                    }else if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                        Float temp = 0f;
                        for(Long l : entry.getValue().entries.get(j).transactDetailIDs){
                            temp += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, l).amount;
                        }
                        if(temp < entry.getValue().entries.get(j).amount){
                            retVal += entry.getValue().entries.get(j).amount-temp;
                        } 
                    }
                }
            }
        }
       unpaidIPP = retVal;
       return retVal;
    }
    
    public ArrayList<TunggakanBean> calculateUnpaidIPPs(ArrayList<Profil> profils, List<Integer> tahuns) throws SQLException, KasirException {
       Set<IPP> ippFilters = new HashSet<>();
       ArrayList<TunggakanBean> retVals = new ArrayList<>();
       float retVal = 0;
       ArrayList<Entry> entries = new ArrayList<>();
       ippFilters.clear();
       int targetMonth = Calendar.getInstance().get(Calendar.MONTH);
       int targetYear = Calendar.getInstance().get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       System.out.println("Month INT: "+Calendar.getInstance().get(Calendar.MONTH));
       ArrayList<String> noInduks = new ArrayList<>();
       for(int i = 0; i< profils.size() ; i++){
           noInduks.add(profils.get(i).noInduk);
            for(int j = 0; j< tahuns.size(); j++){
                ippFilters.add(new IPP(profils.get(i).noInduk, new Level(null,null,null,tahuns.get(j)), entries));

            }
       }
       List<IPP> test = Control.selectIurans(Iuran.Tipe.IPP, IPP.noIndukColName, false, noInduks.toArray(new String[0]));
       
       for(int i = 0 ; i< test.size(); i++){
           TunggakanBean tb = new TunggakanBean();
           for(int j = 0 ; j < test.get(i).entries.size(); j++){
               if(j==0) retVal=0;
               Float totalAmountIPPTDetails = 0f;
               for(Long l : test.get(i).entries.get(j).transactDetailIDs){
                   totalAmountIPPTDetails += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, l).amount;
               }
               if((totalAmountIPPTDetails < test.get(i).entries.get(j).amount)
                   && ((test.get(i).chargedLevel.tahun < targetYear? true: (test.get(i).entries.get(j).period <= targetMonth)))){
                    
                            
                            retVal += test.get(i).entries.get(j).amount-totalAmountIPPTDetails;
                            tunggakanIPPString = tunggakanIPPString.concat("IPP Bulan ");
                            tunggakanIPPString = tunggakanIPPString.concat(getMonthName(test.get(i).entries.get(j).period));
                            tunggakanIPPString = tunggakanIPPString.concat(" "+String.valueOf(test.get(i).chargedLevel.tahun)+"/"+String.valueOf(1+test.get(i).chargedLevel.tahun));
                            tunggakanIPPString = tunggakanIPPString.concat("\r\n");
                            
                            tunggakanIPPEachAmountString = tunggakanIPPEachAmountString.concat("Rp. ");
                            tunggakanIPPEachAmountString = tunggakanIPPEachAmountString.concat(String.valueOf(Math.round(test.get(i).entries.get(j).amount-totalAmountIPPTDetails)));
                            tunggakanIPPEachAmountString = tunggakanIPPEachAmountString.concat("\r\n");
               }
               
                
               
               
           }
           tb.setProfil(profils.get(i));
           tb.setTunggakanIPP(retVal);
           retVals.add(tb);
           System.out.println(test.get(i).noInduk);
       }
       unpaidIPP = retVal;
       return retVals;
    }
   
    private String getMonthName(int p){
        String ret;
        switch(p){
            case 1: ret = "JULI";
                break;
            case 2: ret = "AGUSTUS";
                break;
            case 3: ret = "SEPTEMBER";
                break;
            case 4: ret = "OKTOBER";
                break;
            case 5: ret = "NOPEMBER";
                break;
            case 6: ret = "DESEMBER";
                break;
            case 7: ret = "JANUARI";
                break;
            case 8: ret = "FEBRUARI";
                break;
            case 9: ret = "MARET";
                break;
            case 10: ret = "APRIL";
                break;
            case 11: ret = "MEI";
                break;
            case 12: ret = "JUNI";
                break;
            default: ret = "Invalid";
                break;
        }
        return ret;
        
    }

    public boolean isIPPEnough(Set<Long> transactDetailIDs, float amountIPPinTable) throws SQLException, KasirException {
        Float totalAmountTDetail = 0f;
        for(Long l : transactDetailIDs){
            totalAmountTDetail += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, l).amount;
        }
        if(totalAmountTDetail < amountIPPinTable){
            return false;
        }else{
            return true;
        }
    }
    
    
    public float calculatePaidIPP(Set<Long> transactDetailIDs) throws SQLException, KasirException{
        Float retVal = 0f;
        for(Long l: transactDetailIDs){
            retVal += Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, l).amount;
        }
        return retVal;
    }
    
}
