/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.*;
import java.util.*;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Clerk;
import kasir.Control;
import kasir.DBSR;
import kasir.Filter;
import org.openide.util.Exceptions;
import pelajar.Profil;
import sak.Kalender;
import sak.KasirException;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.ValidatorUtils;
import org.netbeans.validation.api.ui.swing.ValidationPanel;
import org.netbeans.validation.api.builtin.stringvalidation.StringValidators;
import org.openide.util.Exceptions;
import pelajar.Level;
import java.util.UUID;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.*;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import printout.BuktiPembayaran;
/**
 *
 * @author Master
 */
public class InputTransactionFrame extends javax.swing.JFrame {
    private javax.swing.table.TableModel tableModelSeragam;
    private TableModel tableModelIPP;
    private final ValidationPanel validationPanel = new ValidationPanel();
    private IPP ippFromDB;
    private IPP ippCurrent;
    private IPP ippStoreToDB;
    private ComboBoxModel tahunComboBoxModel;
    private final String[] namaBulan = {"JULI", "AGUSTUS", "SEPTEMBER", "OKTOBER", "NOPEMBER", "DESEMBER", "JANUARI", "PEBRUARI", "MARET", "APRIL", "MEI", "JUNI"};
    private UUID ipspTDetailUUID;
    private UUID tSumUUID;
    private UUID ippTDetailUUID;
    private UUID seragamTDetailUUID;
    private UUID ikkTDetailUUID;
    private UUID osisTDetailUUID;
    private UUID ipsbTDetailUUID;
    private UUID iusTDetailUUID;
    private UUID iuaTDetailUUID;
    private UUID illTDetailUUID;
    private UUID sumbanganTDetailUUID;
    private Profil profil;
    private Clerk clerk;
    private TransactionSummary transactionSummary;
    private IPSPTransactionDetail iPSPTransactionDetail;
    private SeragamTransactionDetail seragamTransactionDetail;
    private Kalender theCreatedDate;
    private IPSP ipsp;
    private float minIpsp;
    private float maxIpsp;
    private Seragam seragam;
    private List<Seragam> seragamS;
    private float totalAmount = 0;
    private float unpaidIPP = 0;
    private float unpaidSeragam = 0;
    
    /* JasperReport is the object
    that holds our compiled jrxml file */
    JasperReport jasperReport;


    /* JasperPrint is the object contains
    report after result filling process */
    JasperPrint jasperPrint;

    /**
     * Creates new form InputTransactionFrame
     */
    public InputTransactionFrame() {
        initComponents();
    }
    
    public InputTransactionFrame(Clerk cl, Profil profil) {
        this.clerk = cl;
        this.profil = profil;
        try {
            this.ipsp = Control.selectIuran(Iuran.Tipe.IPSP, IPSP.noIndukColName, false, profil.noInduk);
            minIpsp = 0F;
            maxIpsp = this.ipsp.amount - this.ipsp.totalInstallment;
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "IPSP Belum Di Setting!\r\n".concat(ex.toString()));
            this.dispose();
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "IPSP Belum Di Setting!\r\n".concat(ex.toString()));
            this.dispose();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jDialogTransactionSummary = new javax.swing.JDialog();
        jPanelDialogMain = new javax.swing.JPanel();
        jPanelDialogIPSP = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldIPSPAmount1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxDialogIPSP = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldIPSPNote1 = new javax.swing.JTextField();
        jPanelDialogSeragam = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableDialogSeragam = new javax.swing.JTable();
        jButtonSave1 = new javax.swing.JButton();
        jButtonDialogCancel = new javax.swing.JButton();
        jPanelTransactionSummary1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldTransactionSummaryNote1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldTSumTotalAmount = new javax.swing.JTextField();
        jPanelDialogProfil = new javax.swing.JPanel();
        jLableProfilTitle1 = new javax.swing.JLabel();
        jLabelNama1 = new javax.swing.JLabel();
        jLabelLevel2Level4 = new javax.swing.JLabel();
        jLabelNoInduk1 = new javax.swing.JLabel();
        jLabelLevel2 = new javax.swing.JLabel();
        jTextFieldNama1 = new javax.swing.JTextField();
        jTextFieldNomorInduk1 = new javax.swing.JTextField();
        jTextFieldLevel2Level4 = new javax.swing.JTextField();
        jPanelDialogIPP = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableIPP1 = new javax.swing.JTable();
        jLabelTahun1 = new javax.swing.JLabel();
        jComboBoxTahun1 = new javax.swing.JComboBox();
        DefaultComboBoxModel paymentMethodComboBoxModel = new DefaultComboBoxModel(TransactionDetail.PaymentMethod.values());
        tableModelSeragam = new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, new Boolean(false)},
                {null, null, null, new Boolean(true)},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Seragam", "Jumlah", "Catatan", "CheckBox"
            }
        );

        tableModelIPP = new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"JULI", null},
                {"AGUSTUS", null},
                {"SEPTEMBER", null},
                {"OKTOBER", null},
                {"NOVEMBER", null},
                {"DESEMBER", null},
                {"JANUARI", null},
                {"FEBRUARI", null},
                {"MARET", null},
                {"APRIL", null},
                {"MEI", null},
                {"JUNI", null}

            },
            new String [] {
                "Bulan", "Biaya IPP"
            }
        ){
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };

            boolean[] canEdit = new boolean [] {
                false, true
            };
            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            //        @Override
            //        public boolean isCellEditable(int rowIndex, int columnIndex) {
                //            if(editable){
                    //                return canEdit [columnIndex];
                    //
                    //            }else{
                    //                return false;
                    //            }
                //        }
        };

        try{
            tableModelSeragam = buildSeragamTableModel(profil);
            tableModelIPP = buildIPPTableModel(profil, profil.currentLevel.tahun);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }
        jPanelMain = new javax.swing.JPanel();
        jPanelProfil = new javax.swing.JPanel();
        jLableProfilTitle = new javax.swing.JLabel();
        jLabelNama = new javax.swing.JLabel();
        jLabelLevel2Level3 = new javax.swing.JLabel();
        jLabelNoInduk = new javax.swing.JLabel();
        jLabelLevel1 = new javax.swing.JLabel();
        jTextFieldNama = new javax.swing.JTextField();
        jTextFieldNomorInduk = new javax.swing.JTextField();
        jTextFieldLevel2Level3 = new javax.swing.JTextField();
        jPanelIPP = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanelIPPInternal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableIPP = new javax.swing.JTable();
        jLabelTahun = new javax.swing.JLabel();
        jComboBoxTahun = new javax.swing.JComboBox();
        jPanelIPSP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldIPSPAmount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxIPSP = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldIPSPNote = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldIPSPIuranAmount = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldIPSPSisaAmount = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jUnpaidIPP = new javax.swing.JTextField();
        jPanelSeragam = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSeragam = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jUnpaidSeragam = new javax.swing.JTextField();
        jButtonSubmit = new javax.swing.JButton();
        jPanelTransactionSummary = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldTransactionSummaryNote = new javax.swing.JTextField();

        jDialogTransactionSummary.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialogTransactionSummary.setMinimumSize(new java.awt.Dimension(1024, 768));

        jPanelDialogMain.setMinimumSize(new java.awt.Dimension(1024, 768));
        jPanelDialogMain.setPreferredSize(new java.awt.Dimension(1024, 768));

        jLabel6.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel6.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel7.text")); // NOI18N

        jTextFieldIPSPAmount1.setEditable(false);
        jTextFieldIPSPAmount1.setFocusable(false);

        jLabel8.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel8.text")); // NOI18N

        jComboBoxDialogIPSP.setModel(paymentMethodComboBoxModel);
        jComboBoxDialogIPSP.setEnabled(false);
        jComboBoxDialogIPSP.setFocusable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBoxIPSP, org.jdesktop.beansbinding.ELProperty.create("${selectedItem}"), jComboBoxDialogIPSP, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jComboBoxDialogIPSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDialogIPSPActionPerformed(evt);
            }
        });

        jLabel9.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel9.text")); // NOI18N

        jTextFieldIPSPNote1.setEditable(false);
        jTextFieldIPSPNote1.setFocusable(false);

        javax.swing.GroupLayout jPanelDialogIPSPLayout = new javax.swing.GroupLayout(jPanelDialogIPSP);
        jPanelDialogIPSP.setLayout(jPanelDialogIPSPLayout);
        jPanelDialogIPSPLayout.setHorizontalGroup(
            jPanelDialogIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogIPSPLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldIPSPAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDialogIPSP, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldIPSPNote1))
        );
        jPanelDialogIPSPLayout.setVerticalGroup(
            jPanelDialogIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(jLabel7)
                .addComponent(jTextFieldIPSPAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel8)
                .addComponent(jComboBoxDialogIPSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel9)
                .addComponent(jTextFieldIPSPNote1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel12.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel12.text")); // NOI18N

        jTableDialogSeragam.setModel(tableModelSeragam);
        jTableDialogSeragam.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableDialogSeragamPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(jTableDialogSeragam);

        javax.swing.GroupLayout jPanelDialogSeragamLayout = new javax.swing.GroupLayout(jPanelDialogSeragam);
        jPanelDialogSeragam.setLayout(jPanelDialogSeragamLayout);
        jPanelDialogSeragamLayout.setHorizontalGroup(
            jPanelDialogSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogSeragamLayout.createSequentialGroup()
                .addGroup(jPanelDialogSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        jPanelDialogSeragamLayout.setVerticalGroup(
            jPanelDialogSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogSeragamLayout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButtonSave1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jButtonSave1.text")); // NOI18N
        jButtonSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSave1ActionPerformed(evt);
            }
        });

        jButtonDialogCancel.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jButtonDialogCancel.text")); // NOI18N
        jButtonDialogCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDialogCancelActionPerformed(evt);
            }
        });

        jLabel15.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel15.text")); // NOI18N

        jTextFieldTransactionSummaryNote1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jTextFieldTransactionSummaryNote1.text")); // NOI18N

        jLabel16.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel16.text")); // NOI18N

        jTextFieldTSumTotalAmount.setEditable(false);
        jTextFieldTSumTotalAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextFieldTSumTotalAmount.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jTextFieldTSumTotalAmount.text")); // NOI18N
        jTextFieldTSumTotalAmount.setFocusable(false);

        javax.swing.GroupLayout jPanelTransactionSummary1Layout = new javax.swing.GroupLayout(jPanelTransactionSummary1);
        jPanelTransactionSummary1.setLayout(jPanelTransactionSummary1Layout);
        jPanelTransactionSummary1Layout.setHorizontalGroup(
            jPanelTransactionSummary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTransactionSummary1Layout.createSequentialGroup()
                .addGroup(jPanelTransactionSummary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelTransactionSummary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldTSumTotalAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(jTextFieldTransactionSummaryNote1)))
        );
        jPanelTransactionSummary1Layout.setVerticalGroup(
            jPanelTransactionSummary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTransactionSummary1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelTransactionSummary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextFieldTransactionSummaryNote1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelTransactionSummary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextFieldTSumTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLableProfilTitle1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLableProfilTitle1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLableProfilTitle1.text")); // NOI18N

        jLabelNama1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelNama1.text")); // NOI18N

        jLabelLevel2Level4.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelLevel2Level4.text")); // NOI18N

        jLabelNoInduk1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelNoInduk1.text")); // NOI18N

        jLabelLevel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelLevel2.setText(profil.currentLevel.level1.toString());

        jTextFieldNama1.setEditable(false);
        jTextFieldNama1.setText(profil.biodata.nama);
        jTextFieldNama1.setFocusable(false);
        jTextFieldNama.setText(profil.biodata.nama);

        jTextFieldNomorInduk1.setEditable(false);
        jTextFieldNomorInduk1.setText(profil.noInduk);
        jTextFieldNomorInduk1.setFocusable(false);

        jTextFieldLevel2Level4.setEditable(false);
        jTextFieldLevel2Level4.setText(profil.currentLevel.level2.toString().concat(" "+profil.currentLevel.level3.toString()));
        jTextFieldLevel2Level4.setFocusable(false);

        javax.swing.GroupLayout jPanelDialogProfilLayout = new javax.swing.GroupLayout(jPanelDialogProfil);
        jPanelDialogProfil.setLayout(jPanelDialogProfilLayout);
        jPanelDialogProfilLayout.setHorizontalGroup(
            jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogProfilLayout.createSequentialGroup()
                .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDialogProfilLayout.createSequentialGroup()
                        .addComponent(jLableProfilTitle1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLevel2))
                    .addGroup(jPanelDialogProfilLayout.createSequentialGroup()
                        .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNama1)
                            .addComponent(jLabelNoInduk1)
                            .addComponent(jLabelLevel2Level4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldNomorInduk1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNama1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldLevel2Level4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelDialogProfilLayout.setVerticalGroup(
            jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogProfilLayout.createSequentialGroup()
                .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLableProfilTitle1)
                    .addComponent(jLabelLevel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNama1)
                    .addComponent(jTextFieldNama1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNoInduk1)
                    .addComponent(jTextFieldNomorInduk1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDialogProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLevel2Level4)
                    .addComponent(jTextFieldLevel2Level4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel11.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel11.text")); // NOI18N

        jTableIPP1.setModel(tableModelIPP);
        jScrollPane3.setViewportView(jTableIPP1);

        jLabelTahun1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelTahun1.text")); // NOI18N

        try{
            tahunComboBoxModel = buildIPPtahunComboBoxModel(profil);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }
        jComboBoxTahun1.setModel(tahunComboBoxModel);
        jComboBoxTahun1.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBoxTahun, org.jdesktop.beansbinding.ELProperty.create("${selectedItem}"), jComboBoxTahun1, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jComboBoxTahun1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTahun1ActionPerformed(evt);
            }
        });
        jComboBoxTahun1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxTahun1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabelTahun1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTahun1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTahun1)
                    .addComponent(jComboBoxTahun1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 154, 154))
        );

        javax.swing.GroupLayout jPanelDialogIPPLayout = new javax.swing.GroupLayout(jPanelDialogIPP);
        jPanelDialogIPP.setLayout(jPanelDialogIPPLayout);
        jPanelDialogIPPLayout.setHorizontalGroup(
            jPanelDialogIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogIPPLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelDialogIPPLayout.setVerticalGroup(
            jPanelDialogIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogIPPLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelDialogMainLayout = new javax.swing.GroupLayout(jPanelDialogMain);
        jPanelDialogMain.setLayout(jPanelDialogMainLayout);
        jPanelDialogMainLayout.setHorizontalGroup(
            jPanelDialogMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogMainLayout.createSequentialGroup()
                .addGroup(jPanelDialogMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDialogMainLayout.createSequentialGroup()
                        .addComponent(jPanelDialogProfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelTransactionSummary1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelDialogMainLayout.createSequentialGroup()
                        .addComponent(jButtonSave1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDialogCancel))
                    .addGroup(jPanelDialogMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanelDialogSeragam, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelDialogIPP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelDialogIPSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelDialogMainLayout.setVerticalGroup(
            jPanelDialogMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDialogMainLayout.createSequentialGroup()
                .addGroup(jPanelDialogMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelTransactionSummary1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelDialogProfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDialogIPP, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDialogIPSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelDialogSeragam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDialogMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave1)
                    .addComponent(jButtonDialogCancel))
                .addContainerGap(193, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogTransactionSummaryLayout = new javax.swing.GroupLayout(jDialogTransactionSummary.getContentPane());
        jDialogTransactionSummary.getContentPane().setLayout(jDialogTransactionSummaryLayout);
        jDialogTransactionSummaryLayout.setHorizontalGroup(
            jDialogTransactionSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDialogMain, javax.swing.GroupLayout.PREFERRED_SIZE, 843, Short.MAX_VALUE)
        );
        jDialogTransactionSummaryLayout.setVerticalGroup(
            jDialogTransactionSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogTransactionSummaryLayout.createSequentialGroup()
                .addComponent(jPanelDialogMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));

        jPanelMain.setMinimumSize(new java.awt.Dimension(1024, 768));
        jPanelMain.setPreferredSize(new java.awt.Dimension(1024, 768));

        jLableProfilTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLableProfilTitle.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLableProfilTitle.text")); // NOI18N

        jLabelNama.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelNama.text")); // NOI18N

        jLabelLevel2Level3.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelLevel2Level3.text")); // NOI18N

        jLabelNoInduk.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelNoInduk.text")); // NOI18N

        jLabelLevel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelLevel1.setText(profil.currentLevel.level1.toString());

        jTextFieldNama.setText(profil.biodata.nama);
        jTextFieldNama.setFocusable(false);
        jTextFieldNama.setText(profil.biodata.nama);
        jTextFieldNama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNamaActionPerformed(evt);
            }
        });

        jTextFieldNomorInduk.setText(profil.noInduk);
        jTextFieldNomorInduk.setFocusable(false);

        jTextFieldLevel2Level3.setText(profil.currentLevel.level2.toString().concat(" "+profil.currentLevel.level3.toString()));
        jTextFieldLevel2Level3.setFocusable(false);

        javax.swing.GroupLayout jPanelProfilLayout = new javax.swing.GroupLayout(jPanelProfil);
        jPanelProfil.setLayout(jPanelProfilLayout);
        jPanelProfilLayout.setHorizontalGroup(
            jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProfilLayout.createSequentialGroup()
                .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProfilLayout.createSequentialGroup()
                        .addComponent(jLableProfilTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLevel1))
                    .addGroup(jPanelProfilLayout.createSequentialGroup()
                        .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNama)
                            .addComponent(jLabelNoInduk)
                            .addComponent(jLabelLevel2Level3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldNomorInduk, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNama, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldLevel2Level3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelProfilLayout.setVerticalGroup(
            jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProfilLayout.createSequentialGroup()
                .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLableProfilTitle)
                    .addComponent(jLabelLevel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNama)
                    .addComponent(jTextFieldNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNoInduk)
                    .addComponent(jTextFieldNomorInduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLevel2Level3)
                    .addComponent(jTextFieldLevel2Level3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel2.text")); // NOI18N

        jTableIPP.setModel(tableModelIPP);
        jTableIPP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableIPPFocusLost(evt);
            }
        });
        jTableIPP.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableIPPPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTableIPP);

        javax.swing.GroupLayout jPanelIPPInternalLayout = new javax.swing.GroupLayout(jPanelIPPInternal);
        jPanelIPPInternal.setLayout(jPanelIPPInternalLayout);
        jPanelIPPInternalLayout.setHorizontalGroup(
            jPanelIPPInternalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPInternalLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelIPPInternalLayout.setVerticalGroup(
            jPanelIPPInternalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelIPPInternalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
        );

        jLabelTahun.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabelTahun.text")); // NOI18N

        try{
            tahunComboBoxModel = buildIPPtahunComboBoxModel(profil);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }
        jComboBoxTahun.setModel(tahunComboBoxModel);
        jComboBoxTahun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTahunActionPerformed(evt);
            }
        });
        jComboBoxTahun.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxTahunPropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel1.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel3.text")); // NOI18N

        jTextFieldIPSPAmount.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jTextFieldIPSPAmount.text")); // NOI18N
        jTextFieldIPSPAmount.setName(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jTextFieldIPSPAmount.name")); // NOI18N
        jTextFieldIPSPAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIPSPAmountActionPerformed(evt);
            }
        });
        jTextFieldIPSPAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldIPSPAmountFocusLost(evt);
            }
        });
        jTextFieldIPSPAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldIPSPAmountKeyTyped(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel4.text")); // NOI18N

        jComboBoxIPSP.setModel(paymentMethodComboBoxModel);
        jComboBoxIPSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxIPSPActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel5.text")); // NOI18N

        jTextFieldIPSPNote.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jTextFieldIPSPNote.text")); // NOI18N

        jLabel13.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel13.text")); // NOI18N

        jTextFieldIPSPIuranAmount.setEditable(false);
        jTextFieldIPSPIuranAmount.setText(String.valueOf(ipsp.amount));
        jTextFieldIPSPIuranAmount.setFocusable(false);
        jTextFieldIPSPIuranAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIPSPIuranAmountActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel17.text")); // NOI18N

        jTextFieldIPSPSisaAmount.setEditable(false);
        jTextFieldIPSPSisaAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextFieldIPSPSisaAmount.setText(String.valueOf(maxIpsp));
        jTextFieldIPSPSisaAmount.setFocusable(false);
        jTextFieldIPSPSisaAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIPSPSisaAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelIPSPLayout = new javax.swing.GroupLayout(jPanelIPSP);
        jPanelIPSP.setLayout(jPanelIPSPLayout);
        jPanelIPSPLayout.setHorizontalGroup(
            jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPSPLayout.createSequentialGroup()
                .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanelIPSPLayout.createSequentialGroup()
                        .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxIPSP, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldIPSPAmount, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldIPSPIuranAmount, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldIPSPNote, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17)
                        .addGap(12, 12, 12)
                        .addComponent(jTextFieldIPSPSisaAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelIPSPLayout.setVerticalGroup(
            jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPSPLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextFieldIPSPIuranAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jTextFieldIPSPSisaAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldIPSPAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxIPSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIPSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldIPSPNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel18.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel18.text")); // NOI18N

        jUnpaidIPP.setText(String.valueOf(unpaidIPP));
        jUnpaidIPP.setEnabled(false);

        javax.swing.GroupLayout jPanelIPPLayout = new javax.swing.GroupLayout(jPanelIPP);
        jPanelIPP.setLayout(jPanelIPPLayout);
        jPanelIPPLayout.setHorizontalGroup(
            jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPLayout.createSequentialGroup()
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIPPLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(39, 39, 39)
                        .addComponent(jLabelTahun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTahun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jUnpaidIPP, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelIPPInternal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelIPSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelIPPLayout.setVerticalGroup(
            jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTahun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTahun)
                    .addComponent(jLabel2)
                    .addComponent(jLabel18)
                    .addComponent(jUnpaidIPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelIPPInternal, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelIPSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel10.text")); // NOI18N

        jTableSeragam.setModel(tableModelSeragam);
        jTableSeragam.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableSeragamPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTableSeragam);

        jLabel19.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel19.text")); // NOI18N

        jUnpaidSeragam.setText(String.valueOf(unpaidSeragam));
        jUnpaidSeragam.setEnabled(false);

        javax.swing.GroupLayout jPanelSeragamLayout = new javax.swing.GroupLayout(jPanelSeragam);
        jPanelSeragam.setLayout(jPanelSeragamLayout);
        jPanelSeragamLayout.setHorizontalGroup(
            jPanelSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSeragamLayout.createSequentialGroup()
                .addGroup(jPanelSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSeragamLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(104, 104, 104)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jUnpaidSeragam, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanelSeragamLayout.setVerticalGroup(
            jPanelSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSeragamLayout.createSequentialGroup()
                .addGroup(jPanelSeragamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel19)
                    .addComponent(jUnpaidSeragam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButtonSubmit.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jButtonSubmit.text")); // NOI18N
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jLabel14.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jLabel14.text")); // NOI18N

        jTextFieldTransactionSummaryNote.setText(org.openide.util.NbBundle.getMessage(InputTransactionFrame.class, "InputTransactionFrame.jTextFieldTransactionSummaryNote.text")); // NOI18N

        javax.swing.GroupLayout jPanelTransactionSummaryLayout = new javax.swing.GroupLayout(jPanelTransactionSummary);
        jPanelTransactionSummary.setLayout(jPanelTransactionSummaryLayout);
        jPanelTransactionSummaryLayout.setHorizontalGroup(
            jPanelTransactionSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTransactionSummaryLayout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldTransactionSummaryNote, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
        );
        jPanelTransactionSummaryLayout.setVerticalGroup(
            jPanelTransactionSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTransactionSummaryLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanelTransactionSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextFieldTransactionSummaryNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanelSeragam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelIPP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelProfil, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelTransactionSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jButtonSubmit)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelTransactionSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addComponent(jPanelProfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jPanelIPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelSeragam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSubmit)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setContentPane(validationPanel);
        validationPanel.setInnerComponent(jPanelMain);
        Validator<String> d = StringValidators.trimString(ValidatorUtils.merge(
            StringValidators.REQUIRE_VALID_NUMBER,
            StringValidators.REQUIRE_NON_NEGATIVE_NUMBER,
            StringValidators.numberRange(minIpsp, maxIpsp)));
    validationPanel.getValidationGroup().add(jTextFieldIPSPAmount, d);
    jButtonSubmit.setEnabled(false);

    bindingGroup.bind();

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNamaActionPerformed

    private void jComboBoxDialogIPSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDialogIPSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDialogIPSPActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        try {
            // TODO add your handling code here:
            prepareSubmitObjects();
            continueToConfirmationDialog();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jButtonSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSave1ActionPerformed
        try {
            // TODO add your handling code here:
            saveToDB();
            if (JOptionPane.showConfirmDialog(null, "Print Bukti Pembayaran?", "WARNING",
            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                try {
                        // yes option
                        printBuktiPembayaran();
                } catch (JRException ex) {
                    Exceptions.printStackTrace(ex);
                    JOptionPane.showMessageDialog(rootPane, "Print Bukti Pembayaran Gagal!".concat("\r\n"+ex.toString()));
                } catch (PrinterException ex) {
                        Exceptions.printStackTrace(ex);
                        JOptionPane.showMessageDialog(rootPane, "Print Bukti Pembayaran Gagal!".concat("\r\n"+ex.toString()));
                }
            } else {
                // no option
                JOptionPane.showMessageDialog(rootPane, "Simpan Data Ke Database Berhasil!");
            }
            this.jDialogTransactionSummary.dispose();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Input Transaksi Gagal!".concat("\r\n"+ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Input Transaksi Gagal!".concat("\r\n"+ex.toString()));
        }
    }//GEN-LAST:event_jButtonSave1ActionPerformed

    private void jTableSeragamPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableSeragamPropertyChange
        // TODO add your handling code here:
        if(jTableSeragam.getRowCount() > 0){
            for(int i = 0; i < jTableSeragam.getRowCount(); i++){
                if((Boolean)jTableSeragam.getValueAt(i, 3)!=null){
                    try {
                        seragam = Control.selectIuran(Iuran.Tipe.Seragam, Seragam.noIndukColName, false , profil.noInduk);
                    } catch (SQLException ex) {
                        Exceptions.printStackTrace(ex);
                    } catch (KasirException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_jTableSeragamPropertyChange

    private void jComboBoxIPSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxIPSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxIPSPActionPerformed

    private void jTableIPPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableIPPFocusLost
        // TODO add your handling code here:
//        if (jTable1.isValid()) {
//            jButtonSave.setEnabled(validatePanel());
//        } else {
//            jButtonSave.setEnabled(false);
//        }
    }//GEN-LAST:event_jTableIPPFocusLost

    private void jTableIPPPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableIPPPropertyChange
        // TODO add your handling code here:
        /////BLOOOOOOOOOOM SELESAIIIIIIIIIIIIIIIIIIII
        int i = 0;
        ippCurrent=new IPP();
        ippStoreToDB= new IPP();
        ArrayList<Entry> entry = new ArrayList<>();
        if(ippFromDB.entries.size() !=0){
            for(i=0; i< jTableIPP.getRowCount();i++){
                ippCurrent.entries.add((Boolean)jTableIPP.getValueAt(i,2)? ((ippFromDB.entries.get(i).transactDetailIDs.size() > 0)? new Entry(i, ippFromDB.entries.get(i).amount, ippFromDB.entries.get(i).debt, ippFromDB.entries.get(i).transactDetailIDs): new Entry(i, ippFromDB.entries.get(i).amount)): null);
                if(ippCurrent.entries.get(i)==null){
                    ippStoreToDB.entries.add(null);
                }else if ((ippCurrent.entries.get(i) !=null) ^ (ippFromDB.entries.get(i).transactDetailIDs.size() > 0)){
                    ippStoreToDB.entries.add(new Entry(i, ippFromDB.entries.get(i).amount));
                }else{
                    ippStoreToDB.entries.add(null);
                }
                //ippCurrent.entries.add((Boolean)jTableIPP.getValueAt(i,2)? new IPP(profil.noInduk, new Level(null,null,null,(Integer)jComboBoxTahun.getSelectedItem()),entry).entries.get(i): null);
                //ippStoreToDB.entries.add(ippCurrent.entries.get(i)==null?null:(((ippCurrent.entries.get(i)!=null)^(ippFromDB.entries.get(i)!=null))? new IPP(profil.noInduk, new Level(null,null,null,(int)jComboBoxTahun.getSelectedItem()),entry).entries.get(i):ippCurrent.entries.get(i)));
                //System.out.println(ippStoreToDB.get(i).noInduk);
            }
        }
    }//GEN-LAST:event_jTableIPPPropertyChange

    private void jComboBoxTahunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTahunActionPerformed
        // TODO add your handling code here:
        try{
            this.tableModelIPP = (DefaultTableModel) buildIPPTableModel(this.profil, (int)jComboBoxTahun.getSelectedItem());
            jTableIPP.setModel(this.tableModelIPP);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxTahunActionPerformed

    private void jComboBoxTahunPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxTahunPropertyChange
        // TODO add your handling code here:
        try{
            if(this.jComboBoxTahun.getSelectedItem() !=null){
                this.tableModelIPP = (DefaultTableModel) buildIPPTableModel(this.profil, (int)jComboBoxTahun.getSelectedItem());
                jTableIPP.setModel(this.tableModelIPP);
            }
        }catch(SQLException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Koneksi Error!\r\n".concat(ex.toString()));
        }catch(KasirException ex){
            JOptionPane.showMessageDialog(rootPane, "IPP Belum Di Setting!\r\n".concat(ex.toString()));
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxTahunPropertyChange

    private void jComboBoxTahun1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTahun1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTahun1ActionPerformed

    private void jComboBoxTahun1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxTahun1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTahun1PropertyChange

    private void jTableDialogSeragamPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableDialogSeragamPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableDialogSeragamPropertyChange

    private void jButtonDialogCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDialogCancelActionPerformed
        // TODO add your handling code here:
        jTableIPP.setModel(tableModelIPP);
        this.jDialogTransactionSummary.setVisible(false);
        totalAmount = 0;
        this.setVisible(true);
    }//GEN-LAST:event_jButtonDialogCancelActionPerformed

    private void jTextFieldIPSPAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIPSPAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIPSPAmountActionPerformed

    private void jTextFieldIPSPIuranAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIPSPIuranAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIPSPIuranAmountActionPerformed

    private void jTextFieldIPSPAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIPSPAmountKeyTyped
        // TODO add your handling code here:
        jButtonSubmit.setEnabled(validatePanel());
    }//GEN-LAST:event_jTextFieldIPSPAmountKeyTyped

    private void jTextFieldIPSPAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIPSPAmountFocusLost
        // TODO add your handling code here:
        jButtonSubmit.setEnabled(validatePanel());
    }//GEN-LAST:event_jTextFieldIPSPAmountFocusLost

    private void jTextFieldIPSPSisaAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIPSPSisaAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIPSPSisaAmountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InputTransactionFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDialogCancel;
    private javax.swing.JButton jButtonSave1;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JComboBox jComboBoxDialogIPSP;
    private javax.swing.JComboBox jComboBoxIPSP;
    private javax.swing.JComboBox jComboBoxTahun;
    private javax.swing.JComboBox jComboBoxTahun1;
    private javax.swing.JDialog jDialogTransactionSummary;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelLevel1;
    private javax.swing.JLabel jLabelLevel2;
    private javax.swing.JLabel jLabelLevel2Level3;
    private javax.swing.JLabel jLabelLevel2Level4;
    private javax.swing.JLabel jLabelNama;
    private javax.swing.JLabel jLabelNama1;
    private javax.swing.JLabel jLabelNoInduk;
    private javax.swing.JLabel jLabelNoInduk1;
    private javax.swing.JLabel jLabelTahun;
    private javax.swing.JLabel jLabelTahun1;
    private javax.swing.JLabel jLableProfilTitle;
    private javax.swing.JLabel jLableProfilTitle1;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelDialogIPP;
    private javax.swing.JPanel jPanelDialogIPSP;
    private javax.swing.JPanel jPanelDialogMain;
    private javax.swing.JPanel jPanelDialogProfil;
    private javax.swing.JPanel jPanelDialogSeragam;
    private javax.swing.JPanel jPanelIPP;
    private javax.swing.JPanel jPanelIPPInternal;
    private javax.swing.JPanel jPanelIPSP;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelProfil;
    private javax.swing.JPanel jPanelSeragam;
    private javax.swing.JPanel jPanelTransactionSummary;
    private javax.swing.JPanel jPanelTransactionSummary1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableDialogSeragam;
    private javax.swing.JTable jTableIPP;
    private javax.swing.JTable jTableIPP1;
    private javax.swing.JTable jTableSeragam;
    private javax.swing.JTextField jTextFieldIPSPAmount;
    private javax.swing.JTextField jTextFieldIPSPAmount1;
    private javax.swing.JTextField jTextFieldIPSPIuranAmount;
    private javax.swing.JTextField jTextFieldIPSPNote;
    private javax.swing.JTextField jTextFieldIPSPNote1;
    private javax.swing.JTextField jTextFieldIPSPSisaAmount;
    private javax.swing.JTextField jTextFieldLevel2Level3;
    private javax.swing.JTextField jTextFieldLevel2Level4;
    private javax.swing.JTextField jTextFieldNama;
    private javax.swing.JTextField jTextFieldNama1;
    private javax.swing.JTextField jTextFieldNomorInduk;
    private javax.swing.JTextField jTextFieldNomorInduk1;
    private javax.swing.JTextField jTextFieldTSumTotalAmount;
    private javax.swing.JTextField jTextFieldTransactionSummaryNote;
    private javax.swing.JTextField jTextFieldTransactionSummaryNote1;
    private javax.swing.JTextField jUnpaidIPP;
    private javax.swing.JTextField jUnpaidSeragam;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    
    private void continueToConfirmationDialog() {
        this.setVisible(false);
        //this.dispose();
        jDialogTransactionSummary.setVisible(true);
    }

    private void saveToDB() throws SQLException, KasirException {
        Control.insertTSummary(new TransactionSummary(this.transactionSummary.uuid, this.transactionSummary.noInduk, this.transactionSummary.idClerk, this.transactionSummary.totalAmount, this.transactionSummary.note));
        
        this.transactionSummary = Control.selectTSummary(TransactionSummary.uuidColName, false, tSumUUID.toString());
        
        //Bagian IPSP
        if(this.iPSPTransactionDetail!=null){
            this.iPSPTransactionDetail.transactSummaryID= transactionSummary.id;
            this.iPSPTransactionDetail.lastUpdateDate = theCreatedDate;
            Control.insertTDetail(TransactionDetail.Tipe.IPSPTransaction, this.iPSPTransactionDetail);
            Set<IPSPTransactionDetail> filterIPSP = new HashSet<>();
            filterIPSP.add(this.iPSPTransactionDetail);
            Map<Long,IPSPTransactionDetail> map = new HashMap<>();
            Control.filterSelectTDetails(TransactionDetail.Tipe.IPSPTransaction, filterIPSP).get(this.iPSPTransactionDetail);
            this.iPSPTransactionDetail = Control.selectTDetail(TransactionDetail.Tipe.IPSPTransaction, TransactionDetail.uuidColName, false, ipspTDetailUUID.toString());
            ipsp.transactDetailIDs.add(this.iPSPTransactionDetail.id);
            ipsp.totalInstallment = ipsp.totalInstallment + this.iPSPTransactionDetail.amount;
            Control.updateIuran(Iuran.Tipe.IPSP, ipsp);
        }
        //Bagian Seragam
        for(int i = 0; i<seragamS.size(); i++){
            if((Boolean)jTableSeragam.getModel().getValueAt(i,3)){
                seragam = seragamS.get(i);
                seragamTDetailUUID = UUID.randomUUID();
                this.seragamTransactionDetail = new SeragamTransactionDetail(seragamTDetailUUID,seragamS.get(i).id, clerk.id, transactionSummary.id, profil.noInduk, profil.currentLevel.level1, seragamS.get(i).amount, TransactionDetail.PaymentMethod.CASH, new Kalender(), new Kalender(), seragamS.get(i).note, false,false);
                Control.insertTDetail(TransactionDetail.Tipe.SeragamTransaction, this.seragamTransactionDetail);
                this.seragamTransactionDetail = Control.selectTDetail(TransactionDetail.Tipe.SeragamTransaction, TransactionDetail.uuidColName, false, seragamTDetailUUID.toString());
                seragam.transactDetailIDs.add(this.seragamTransactionDetail.id);
                Control.updateIuran(Iuran.Tipe.Seragam, seragam);
                this.transactionSummary = Control.selectTSummary(this.transactionSummary.id);
                this.transactionSummary.totalAmount = seragam.amount;
                Control.updateTSummary(this.transactionSummary);
            }else{
                System.out.println("Seragam transaction : nothing");
            }
        }
        
        //Bagian IPP
        for(int i = 0 ; i < 12 ; i++){
            ippTDetailUUID = UUID.randomUUID();
            if(ippStoreToDB.entries.get(i)!=null){
                if(ippFromDB.entries.get(i).transactDetailIDs.size() == 0){
                IPPTransactionDetail ippTransactionDetail = new IPPTransactionDetail(ippTDetailUUID, 
                                                                                        ippFromDB.id, 
                                                                                        clerk.id, 
                                                                                        transactionSummary.id, profil.noInduk, profil.currentLevel.level1, ippFromDB.entries.get(i).amount, TransactionDetail.PaymentMethod.CASH,
                                                                                        jTableIPP.getValueAt(i,0).toString().concat(" Tahun ").concat(jComboBoxTahun.getSelectedItem().toString()),false);
                Control.insertTDetail(TransactionDetail.Tipe.IPPTransaction, ippTransactionDetail);
                ippTransactionDetail = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, TransactionDetail.uuidColName, false, ippTDetailUUID.toString());
                ippStoreToDB.entries.get(i).transactDetailIDs.add(ippTransactionDetail.id);
                
                }
            }
        }
        ippStoreToDB.id = ippFromDB.id;
        ippStoreToDB.noInduk = ippFromDB.noInduk;
        ippStoreToDB.chargedLevel = ippFromDB.chargedLevel;
        Control.updateIuran(Iuran.Tipe.IPP, ippStoreToDB);
        this.transactionSummary.totalAmount = totalAmount;
        Control.updateTSummary(transactionSummary);
       
    }

    private void prepareObjects() throws SQLException, KasirException {
        IPSP ipsp = Control.selectIuran(Iuran.Tipe.IPSP, IPSP.noIndukColName,false, profil.noInduk);
        jTextFieldIPSPIuranAmount.setText(String.valueOf(ipsp.amount));
        if(!jTextFieldIPSPAmount.getText().equals("")){
            if(Float.valueOf(jTextFieldIPSPAmount.getText()) > 0F){
                this.ipsp = ipsp;
                
                ipspTDetailUUID = UUID.randomUUID();
                IPSPTransactionDetail ipspTransactionDetail = new IPSPTransactionDetail(ipspTDetailUUID,ipsp.id, this.clerk.id, 0L, profil.noInduk, profil.currentLevel.level1, Float.valueOf(jTextFieldIPSPAmount.getText()),
                                                                        (TransactionDetail.PaymentMethod)jComboBoxIPSP.getSelectedItem(), new sak.Kalender(System.currentTimeMillis()), null, jTextFieldIPSPNote.getText(), false,false);
                theCreatedDate = new sak.Kalender(System.currentTimeMillis());
                tSumUUID = UUID.randomUUID();
                TransactionSummary transactionSummary = new TransactionSummary(tSumUUID,profil.noInduk, this.clerk.id, theCreatedDate, theCreatedDate, Float.valueOf(jTextFieldIPSPAmount.getText()), "TSum Note");
                this.iPSPTransactionDetail = ipspTransactionDetail;
                this.transactionSummary = transactionSummary;
            }
        }
        this.tableModelSeragam = buildSeragamTableModel(this.profil);
        jTableSeragam.setModel(this.tableModelSeragam);
        
        this.tableModelIPP = (DefaultTableModel) buildIPPTableModel(this.profil, (Integer)jComboBoxTahun.getSelectedItem());
        jTableIPP.setModel(this.tableModelIPP);
    }
    
    private void prepareSubmitObjects() throws SQLException, KasirException {
        tSumUUID = UUID.randomUUID();
        TransactionSummary transactionSummary = new TransactionSummary(tSumUUID,profil.noInduk, this.clerk.id, theCreatedDate, theCreatedDate, totalAmount, jTextFieldTransactionSummaryNote.getText());
        
        if(!jTextFieldIPSPAmount.getText().equals("")){
            if(Float.valueOf(jTextFieldIPSPAmount.getText()) > 0F){
                IPSP ipsp = Control.selectIuran(Iuran.Tipe.IPSP, IPSP.noIndukColName,false, profil.noInduk);
                this.ipsp = ipsp;
                ipspTDetailUUID = UUID.randomUUID();
                IPSPTransactionDetail ipspTransactionDetail = new IPSPTransactionDetail(ipspTDetailUUID,ipsp.id, this.clerk.id, 0L, profil.noInduk, profil.currentLevel.level1, Float.valueOf(jTextFieldIPSPAmount.getText()),
                                                                        (TransactionDetail.PaymentMethod)jComboBoxIPSP.getSelectedItem(), new sak.Kalender(System.currentTimeMillis()), null, jTextFieldIPSPNote.getText(), false,false);
                theCreatedDate = new sak.Kalender(System.currentTimeMillis());
                this.iPSPTransactionDetail = ipspTransactionDetail;
                jTextFieldIPSPAmount1.setText(jTextFieldIPSPAmount.getText());
                jTextFieldIPSPNote1.setText(jTextFieldIPSPNote.getText());
                totalAmount = totalAmount + (Float.valueOf(jTextFieldIPSPAmount.getText()));
            }
        }
//Seragam PART        
        this.tableModelSeragam = buildSeragamTableModel(this.profil);
        jTableSeragam.setModel(this.tableModelSeragam);
        jTableDialogSeragam.setModel(this.tableModelSeragam);
        for(int i = 0 ; i < seragamS.size(); i++){
            if((Boolean)jTableSeragam.getModel().getValueAt(i,3)){
                totalAmount = totalAmount + seragamS.get(i).amount;
            }
        }
//IPP PART
        this.tableModelIPP = (DefaultTableModel) buildIPPSubmitTableModel(this.profil, (Integer)jComboBoxTahun.getSelectedItem());
        jTableIPP.setModel(this.tableModelIPP);
        jTableIPP1.setModel(this.tableModelIPP);
        
        for(int i = 0 ; i<12; i++){
            if(ippStoreToDB.entries.get(i) != null){
                totalAmount = totalAmount + ippFromDB.entries.get(i).amount;
            }
        }
        
        transactionSummary.totalAmount = totalAmount;
        transactionSummary.note = jTextFieldTransactionSummaryNote.getText();
        transactionSummary.createDate = new Kalender(System.currentTimeMillis());
        this.transactionSummary = transactionSummary;
        jTextFieldTransactionSummaryNote1.setText(jTextFieldTransactionSummaryNote.getText());
        jTextFieldTSumTotalAmount.setText(String.valueOf(totalAmount));
        
    }
    
    private TableModel buildSeragamTableModel(Profil profil) throws SQLException, KasirException{
       String columnNames[] = {"Transaksi Seragam", "Biaya", "Catatan", "Check Box"};
       Set<Seragam> seragamFilters = new HashSet<>();
       seragamFilters.add(new Seragam(profil.noInduk,null, null, 0F, null));
       Map<Long, Seragam> searchResultMap = new HashMap<>();
       searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.Seragam, seragamFilters);
       
       int j = 0;
       seragamS = new ArrayList<>();       
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, Seragam> entry: searchResultMap.entrySet()){
            if(entry.getValue().transactDetailIDs.size() == 0){
                seragamS.add(entry.getValue());
            }
            j++;
        }
       }
       Object[][] data = new Object[seragamS.size()][5];
       for(int i =0; i < seragamS.size(); i++){
            data[i][0]= seragamS.get(i).transactName;
            data[i][1]= seragamS.get(i).amount;
            data[i][2]= seragamS.get(i).note;
            if(seragamS.get(i).transactDetailIDs.size()>0){
                data[i][3] = new Boolean(true);
            }else if(jTableSeragam != null && (Boolean)jTableSeragam.getValueAt(i,3)){
                data[i][3] = jTableSeragam.getValueAt(i,3);
            }else{
                data[i][3] = new Boolean(false);
            }
       }
       calculateUnpaidSeragam(profil);
       if(data.length > 0){
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
               if(jDialogTransactionSummary.isVisible()){
                    return false;
               }else{
                    return true;
               }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;
       }else{
           TableModel tm = new DefaultTableModel(columnNames, 4);
           return tm;
       }
   }
    
    private ComboBoxModel buildIPPtahunComboBoxModel(Profil profil) throws SQLException, KasirException {
       Set<IPP> ippFilters = new HashSet<>();
       ArrayList<Entry> entries = new ArrayList();
       ippFilters.add(new IPP(profil.noInduk, null, entries));
       Map<Long, IPP> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
       List<Integer> tahun = new ArrayList<>();
       Object[][] data = new Object[searchResultMap.size()][12];
       int i = 0;
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, IPP> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getValue().entries.get(i);
            data[i][1]= entry.getValue().entries.get(i).amount;
            
            tahun.add(entry.getValue().chargedLevel.tahun);
            i++;
        }
       }
       calculateUnpaidIPP(profil, tahun);
       tahunComboBoxModel = new DefaultComboBoxModel(tahun.toArray());
       return tahunComboBoxModel;
    }

    private TableModel buildIPPTableModel(Profil profil, int tahun) throws SQLException, KasirException {
       String columnNames[] = {"Bulan", "Biaya IPP", "Check Box"};
       Set<IPP> ippFilters = new HashSet<>();
       ArrayList<Entry> entries = new ArrayList<>();
       ippFilters.clear();
       ippFilters.add(new IPP(profil.noInduk, new Level(null,null,null,tahun), entries));
       Map<Long, IPP> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
       Object[][] data = new Object[12][3];
       int i = 0;
       final boolean[] canEdit = new boolean [12];
       ippFromDB = new IPP();
       float amountIPPinTable;
       float amountIPPinTDetail;
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, IPP> entry: searchResultMap.entrySet()){
            for(int j =0 ; j< entry.getValue().entries.size(); j++){
                data[j][0]= namaBulan[j];//entry.getValue().entries.get(j).period;
                data[j][1]= entry.getValue().entries.get(j).amount; // ANEH NIH MASA BEGINI, DI KALI DUA SIH?
                amountIPPinTable = entry.getValue().entries.get(j).amount;
                
                //if(jTable2 != null){data[j][2]= jTable2.getModel().getValueAt(j,2);}else{data[j][2]= new Boolean(false);}
                if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                        
//                    if(jTableIPP != null){
//                        data[j][2]=jTableIPP.getValueAt(j,2);
//                    }else{
                            data[j][2] = new Boolean(true);
//                    }
                }else{
//                    if(jTableIPP !=null){
//                        data[j][2]=jTableIPP.getValueAt(j,2);
//                    }else{
                        data[j][2] = new Boolean(false);
//                    }
                }
                ippFromDB.entries.add(entry.getValue().entries.get(j));
                canEdit[j] = (entry.getValue().entries.get(j).transactDetailIDs.size() > 0);
                
                
            }
            ippFromDB.id = entry.getValue().id;
            ippFromDB.noInduk = entry.getValue().noInduk;
            ippFromDB.chargedLevel = entry.getValue().chargedLevel;
            i++;
        }
        TableModel tm = new DefaultTableModel(data, columnNames){
            boolean[] chooseEdit = new boolean[]{false,false,true};
            
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                if(!jDialogTransactionSummary.isVisible()){
                    if((Boolean)getValueAt(row, 2)){
                        if((column == 0 || column ==1)){
                            return column == 2;
                        //return false;
                        }
                        return !canEdit[row];
                    }
                    if((column == 0 && column ==1)|| column == 2){
                            //return column == 2;
                        return chooseEdit[column];
                    }

                    return false;
               }else{
                    return false;
                }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;
       }else{
           TableModel tm = new DefaultTableModel(data, columnNames);
           JOptionPane.showMessageDialog(rootPane, "IPP Belum Di Setting!\r\n");
           this.dispose();
           return null;
       }
       
       
    }
    private TableModel buildIPPSubmitTableModel(Profil profil, int tahun) throws SQLException, KasirException {
       String columnNames[] = {"Bulan", "Biaya IPP", "Check Box"};
       Object[][] data = new Object[12][3];
       
       final boolean[] canEdit = new boolean [12];
         
        for(int i = 0 ; i < ippCurrent.entries.size(); i++){
                data[i][0]= namaBulan[i];//entry.getValue().entries.get(j).period;
                data[i][1]= ippFromDB.entries.get(i).amount; // ANEH NIH MASA BEGINI, DI KALI DUA SIH?
                if(ippCurrent.entries.get(i) != null){
//                    if(jTableIPP != null){
//                        data[j][2]=jTableIPP.getValueAt(j,2);
//                    }else{
                        data[i][2] = new Boolean(true);
//                    }
                }else{
//                    if(jTableIPP !=null){
//                        data[j][2]=jTableIPP.getValueAt(j,2);
//                    }else{
                        data[i][2] = new Boolean(false);
//                    }
                }
       }
       
       TableModel tm = new DefaultTableModel(data, columnNames){
            boolean[] chooseEdit = new boolean[]{false,false,true};
            
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                if(!jDialogTransactionSummary.isVisible()){
                    if((Boolean)getValueAt(row, 2)){
                        if((column == 0 || column ==1)){
                            return column == 2;
                        //return false;
                        }
                        return !canEdit[row];
                    }
                    if((column == 0 && column ==1)|| column == 2){
                            //return column == 2;
                        return chooseEdit[column];
                    }

                    return false;
               }else{
                    return false;
                }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;


    }
    
    private float calculateUnpaidIPP(Profil profil, List<Integer> tahuns) throws SQLException, KasirException {
       Set<IPP> ippFilters = new HashSet<>();
       float retVal = 0;
       ArrayList<Entry> entries = new ArrayList<>();
       ippFilters.clear();
       for(int i = 0; i< tahuns.size(); i++){
           ippFilters.add(new IPP(profil.noInduk, new Level(null,null,null,tahuns.get(i)), entries));
           
        }
       Map<Long, IPP> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
        if(searchResultMap.size() > 0){
            for(Map.Entry<Long, IPP> entry: searchResultMap.entrySet()){
                for(int j =0 ; j< entry.getValue().entries.size(); j++){
                    if(entry.getValue().entries.get(j).transactDetailIDs.size() == 0){
                            retVal += entry.getValue().entries.get(j).amount;
                    }
                }
            }
        }
       unpaidIPP = retVal;
       return retVal;
    }
    
    private float calculateUnpaidSeragam(Profil profil) throws SQLException, KasirException {
       float retVal = 0;
       Set<Seragam> seragamFilters = new HashSet<>();
       seragamFilters.add(new Seragam(profil.noInduk,null, null, 0F, null));
       Map<Long, Seragam> searchResultMap = new HashMap<>();
       searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.Seragam, seragamFilters);
       seragamS = new ArrayList<>();       
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, Seragam> entry: searchResultMap.entrySet()){
            if(entry.getValue().transactDetailIDs.size()== 0){
                seragamS.add(entry.getValue());
            }
        }
       }
       for(int i =0; i < seragamS.size(); i++){
            if(seragamS.get(i).transactDetailIDs.size()==0){
                retVal += seragamS.get(i).amount;
            }
       }
       unpaidSeragam = retVal;
       return retVal;
    }
    
    private boolean validatePanel(){
        return !validationPanel.isFatalProblem();
    }

    private void printBuktiPembayaran() throws JRException, PrinterException {
        // connection is the data source we used to fetch the data from
        printout.BuktiPembayaran pb = new BuktiPembayaran();
        Connection connection = pb.establishConnection(); 
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
        HashMap jasperParameter = new HashMap();
        jasperParameter.put("Param_TransactionSummary_ID", ((Long)transactionSummary.id).intValue());
        jasperParameter.put("Param_Clerk_ID", clerk.id);
        jasperParameter.put("Param_Profil_ID", profil.noInduk);
        // jrxml compiling process
//        jasperReport = JasperCompileManager.compileReport
//        ("C://Users//Master//Documents//NetBeansProjects//Kasir7//src//printout//PrintoutBuktiPembayaran.jrxml");
        jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintoutBuktiPembayaran.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
//        JasperExportManager.exportReportToPdfFile(jasperPrint, "F://sample_report.pdf");
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//sample_report.pdf");

        // 2- export to HTML
//        JasperExportManager.exportReportToHtmlFile(jasperPrint, "F://sample_report.html" ); 
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//sample_report.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        //exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "F://simple_report.xls" );
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//simple_report.xls" );

        exporter.exportReport();
        
        PrinterJob job = PrinterJob.getPrinterJob();
        PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();
        printRequestAttributeSet.add(OrientationRequested.PORTRAIT);
        printRequestAttributeSet.add(MediaSizeName.ISO_A4); 
        MediaSizeName mediaSizeName = MediaSize.findMedia(64,25,MediaPrintableArea.MM);
        printRequestAttributeSet.add(mediaSizeName);
        printRequestAttributeSet.add(new Copies(1));
        JRPrintServiceExporter exporter1;
        exporter1 = new JRPrintServiceExporter();
        //jasperParameter.put(JRExporterParameter.JASPER_PRINT, jasperPrint);
        jasperParameter.put(JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, printRequestAttributeSet);
        jasperParameter.put(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
        jasperParameter.put(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.TRUE);
        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        jasperParameter.put(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter1.setParameters(jasperParameter);
        exporter1.exportReport();
        job.print(printRequestAttributeSet);
    }
            
}
