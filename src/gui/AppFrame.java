/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import iuran.Iuran;
import iuran.TransactionSummary;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Clerk;
import kasir.Control;
import kasir.DBSR;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.view.JasperViewer;
import org.openide.util.Exceptions;
import pelajar.Biodata;
import pelajar.Level;
import pelajar.Profil;
import printout.BuktiPembayaran;
import printout.PenerimaanKasir;
import sak.Kalender;
import sak.KasirException;

/**
 *
 * @author Master
 */
public class AppFrame extends javax.swing.JFrame {
    private Long tSumID;
    private ArrayList<IPP> paramIPPs;
    private ArrayList<CicilanHutang> paramCicilanHutangs;
    private IPSP paramIPSP;
    private PASB paramPASB;
    private ArrayList<IKS> paramIKSs;
    private ArrayList<Seragam> paramSeragams;
    private ArrayList<Almamater> paramAlmamaters;
    private IPSB paramIPSB;
    private ArrayList<Buku> paramBukus;
    private ArrayList<ILL> paramILLs;
    private IUA paramIUA;
    private ArrayList<IUS> paramIUSs;
    private ArrayList<OSIS> paramOSISs;
    private ArrayList<PVT> paramPVTs;
    private ArrayList<Tabungan> paramTabungans;
    private ArrayList<Sumbangan> paramSumbangans;
    private ArrayList<Attribute> paramAttributes;
    private String tunggakanTotalAmount;
    public Float totalDebt;
    public boolean isPPDB = false;
    /* JasperReport is the object
    that holds our compiled jrxml file */
    JasperReport jasperReport;
    

    /* JasperPrint is the object contains
    report after result filling process */
    JasperPrint jasperPrint;
    /**
     * Creates new form AppFrame
     */
    public AppFrame() {
        this.clerk = new Clerk();
        try {
            Control.login("rusly","123456");
            initComponents();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    public AppFrame(Clerk clerk){
        if(DBSR.dbURL.equals("jdbc:mysql://ark3.dayarka.com/rusly_ppdbdb")){
            isPPDB = true;
        }else{
            isPPDB = false;
        }

        initComponents();
        this.clerk = clerk;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableModelInitialSearch = new DefaultTableModel();
        tableModelTSum = new DefaultTableModel();
        tableModelTunggakanProfil = new DefaultTableModel();
        jPanel1 = new javax.swing.JPanel();
        Level level = new Level();
        List<Level.Level1> listLevel1 = new ArrayList<Level.Level1>(Arrays.asList(Level.Level1.values()));
        List<Level.Level2> listLevel2 = new ArrayList<Level.Level2>(Arrays.asList(Level.Level2.values()));
        List<Level.Level3> listLevel3 = new ArrayList<Level.Level3>(Arrays.asList(Level.Level3.values()));
        listLevel1.add(0, null);
        listLevel2.add(0, null);
        listLevel3.add(0, null);
        DefaultComboBoxModel level1ComboBoxModel = new DefaultComboBoxModel(listLevel1.toArray());
        DefaultComboBoxModel level2ComboBoxModel = new DefaultComboBoxModel(listLevel2.toArray());
        DefaultComboBoxModel level3ComboBoxModel = new DefaultComboBoxModel(listLevel3.toArray());
        jPanel2 = new javax.swing.JPanel();
        jLabelNamaSiswa = new javax.swing.JLabel();
        jTextFieldNamaSiswa = new javax.swing.JTextField();
        jLabelNomorInduk = new javax.swing.JLabel();
        jTextFieldNomorInduk = new javax.swing.JTextField();
        jLabelSekolah = new javax.swing.JLabel();
        jComboBoxLevel1 = new javax.swing.JComboBox();
        jLabelKelas = new javax.swing.JLabel();
        jComboBoxLevel2 = new javax.swing.JComboBox();
        jComboBoxLevel3 = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        jInputSiswa = new javax.swing.JButton();
        jButtonInsertKasir = new javax.swing.JButton();
        jButtonEditDeleteProfil = new javax.swing.JButton();
        jButtonSettingIuran = new javax.swing.JButton();
        jButtonSettingGL = new javax.swing.JButton();
        jButtonSettlement = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInitialSearch = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTSum = new javax.swing.JTable();
        jButtonTSumEdit = new javax.swing.JButton();
        jButtonTSumPrint = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        jButtonSearch = new javax.swing.JButton();
        jButtonTransaksi = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonRips = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableTunggakanProfil = new javax.swing.JTable();
        selectedProfileName = new javax.swing.JLabel();
        selectedProfilTotalDebt = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        dateChooserComboTSumS = new datechooser.beans.DateChooserCombo();
        jToolBar4 = new javax.swing.JToolBar();
        jButtonTSum = new javax.swing.JButton();
        jButtonPrintReportKasir = new javax.swing.JButton();
        jToolBar5 = new javax.swing.JToolBar();
        dateChooserComboTSumE = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbCreatedDate = new javax.swing.JCheckBox();
        cbLastUpdateDate = new javax.swing.JCheckBox();
        jLabelTitle = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.title")); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1152, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMinimumSize(new java.awt.Dimension(1024, 768));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelNamaSiswa.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelNamaSiswa.text")); // NOI18N

        jTextFieldNamaSiswa.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jTextFieldNamaSiswa.text")); // NOI18N

        jLabelNomorInduk.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelNomorInduk.text")); // NOI18N

        jTextFieldNomorInduk.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jTextFieldNomorInduk.text")); // NOI18N

        jLabelSekolah.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelSekolah.text")); // NOI18N

        jComboBoxLevel1.setModel(level1ComboBoxModel);

        jLabelKelas.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelKelas.text")); // NOI18N

        jComboBoxLevel2.setModel(level2ComboBoxModel);

        jComboBoxLevel3.setModel(level3ComboBoxModel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNamaSiswa)
                .addGap(22, 22, 22)
                .addComponent(jTextFieldNamaSiswa, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelNomorInduk)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldNomorInduk, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelSekolah)
                .addGap(22, 22, 22)
                .addComponent(jComboBoxLevel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelKelas)
                .addGap(22, 22, 22)
                .addComponent(jComboBoxLevel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxLevel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelKelas)
                        .addComponent(jComboBoxLevel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxLevel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNamaSiswa)
                        .addComponent(jTextFieldNamaSiswa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNomorInduk)
                        .addComponent(jTextFieldNomorInduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSekolah)
                        .addComponent(jComboBoxLevel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(78, 78, 78))
        );

        jToolBar1.setRollover(true);

        jInputSiswa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user5_16.png"))); // NOI18N
        jInputSiswa.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jInputSiswa.text")); // NOI18N
        jInputSiswa.setFocusable(false);
        jInputSiswa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jInputSiswa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jInputSiswa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInputSiswaActionPerformed(evt);
            }
        });
        jToolBar1.add(jInputSiswa);

        jButtonInsertKasir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user3_16.png"))); // NOI18N
        jButtonInsertKasir.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonInsertKasir.text")); // NOI18N
        jButtonInsertKasir.setFocusable(false);
        jButtonInsertKasir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonInsertKasir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonInsertKasir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertKasirActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonInsertKasir);

        jButtonEditDeleteProfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user6_16.png"))); // NOI18N
        jButtonEditDeleteProfil.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonEditDeleteProfil.text")); // NOI18N
        jButtonEditDeleteProfil.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEditDeleteProfil.setMaximumSize(new java.awt.Dimension(101, 41));
        jButtonEditDeleteProfil.setMinimumSize(new java.awt.Dimension(101, 41));
        jButtonEditDeleteProfil.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonEditDeleteProfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditDeleteProfilActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonEditDeleteProfil);

        jButtonSettingIuran.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user_info_16.png"))); // NOI18N
        jButtonSettingIuran.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSettingIuran.text")); // NOI18N
        jButtonSettingIuran.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSettingIuran.setMaximumSize(new java.awt.Dimension(101, 41));
        jButtonSettingIuran.setMinimumSize(new java.awt.Dimension(101, 41));
        jButtonSettingIuran.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSettingIuran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettingIuranActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSettingIuran);

        jButtonSettingGL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/licence_16.png"))); // NOI18N
        jButtonSettingGL.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSettingGL.text")); // NOI18N
        jButtonSettingGL.setFocusable(false);
        jButtonSettingGL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSettingGL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSettingGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettingGLActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSettingGL);

        jButtonSettlement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Tools.png"))); // NOI18N
        jButtonSettlement.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSettlement.text")); // NOI18N
        jButtonSettlement.setFocusable(false);
        jButtonSettlement.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSettlement.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSettlement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettlementActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSettlement);

        jTableInitialSearch.setAutoCreateRowSorter(true);
        jTableInitialSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableInitialSearch.setModel(tableModelInitialSearch);
        jTableInitialSearch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableInitialSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableInitialSearchMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableInitialSearchMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableInitialSearchMouseReleased(evt);
            }
        });
        jTableInitialSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableInitialSearchKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableInitialSearch);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTableTSum.setAutoCreateRowSorter(true);
        jTableTSum.setModel(tableModelTSum);
        jTableTSum.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableTSum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableTSumMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableTSum);

        jButtonTSumEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/News.png"))); // NOI18N
        jButtonTSumEdit.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTSumEdit.text")); // NOI18N
        jButtonTSumEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSumEditActionPerformed(evt);
            }
        });

        jButtonTSumPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Print.png"))); // NOI18N
        jButtonTSumPrint.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTSumPrint.text")); // NOI18N
        jButtonTSumPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSumPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButtonTSumEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonTSumPrint)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 151, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTSumEdit)
                    .addComponent(jButtonTSumPrint)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );

        jToolBar3.setRollover(true);

        jButtonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paly_16.png"))); // NOI18N
        jButtonSearch.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSearch.text")); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonSearch);

        jButtonTransaksi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/money_16.png"))); // NOI18N
        jButtonTransaksi.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTransaksi.text")); // NOI18N
        jButtonTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransaksiActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonTransaksi);

        jButtonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reload_16.png"))); // NOI18N
        jButtonClear.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonClear.text")); // NOI18N
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonClear);

        jButtonRips.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_pencil_16.png"))); // NOI18N
        jButtonRips.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonRips.text")); // NOI18N
        jButtonRips.setFocusable(false);
        jButtonRips.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRipsActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonRips);

        jTableTunggakanProfil.setModel(tableModelTunggakanProfil);
        jScrollPane3.setViewportView(jTableTunggakanProfil);

        selectedProfileName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        selectedProfileName.setText("Peserta Didik");

        selectedProfilTotalDebt.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.selectedProfilTotalDebt.text")); // NOI18N

        jToolBar2.setRollover(true);

        dateChooserComboTSumS.setFormat(1);
        dateChooserComboTSumS.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        jToolBar2.add(dateChooserComboTSumS);

        jToolBar4.setRollover(true);

        jButtonTSum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/News.png"))); // NOI18N
        jButtonTSum.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTSum.text")); // NOI18N
        jButtonTSum.setFocusable(false);
        jButtonTSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSumActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonTSum);

        jButtonPrintReportKasir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Print.png"))); // NOI18N
        jButtonPrintReportKasir.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonPrintReportKasir.text")); // NOI18N
        jButtonPrintReportKasir.setFocusable(false);
        jButtonPrintReportKasir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPrintReportKasir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintReportKasirActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonPrintReportKasir);

        jToolBar5.setRollover(true);

        dateChooserComboTSumE.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        jToolBar5.add(dateChooserComboTSumE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow_Left.png"))); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabel1.text")); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow_Right.png"))); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabel2.text")); // NOI18N
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        cbCreatedDate.setSelected(true);
        cbCreatedDate.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.cbCreatedDate.text")); // NOI18N
        cbCreatedDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCreatedDateActionPerformed(evt);
            }
        });

        cbLastUpdateDate.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.cbLastUpdateDate.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedProfileName)
                    .addComponent(selectedProfilTotalDebt))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCreatedDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLastUpdateDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(selectedProfileName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedProfilTotalDebt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToolBar5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbCreatedDate)
                        .addComponent(cbLastUpdateDate))
                    .addComponent(jToolBar4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText(isPPDB?"PPDB":"KASIR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 988, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        jMenu1.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jMenu1.text")); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jMenu2.text")); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1131, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        try {
            Biodata biodata = jTextFieldNamaSiswa.getText().isEmpty()? new Biodata(): new Biodata(jTextFieldNamaSiswa.getText(), null,null, null, null, null, null, null, null, null, null);
            Profil profil = new Profil();
            String noInduk = jTextFieldNomorInduk.getText();
            Level level = new Level();
            level.level1 = (Level.Level1)jComboBoxLevel1.getSelectedItem();
            level.level2 = (Level.Level2)jComboBoxLevel2.getSelectedItem();
            level.level3 = (Level.Level3)jComboBoxLevel3.getSelectedItem();
            profil.biodata = biodata.isEmpty()?null:biodata;
            profil.currentLevel = level.isEmpty()?null:level;
            profil.noInduk = noInduk.isEmpty()?null:noInduk;
            tableModelInitialSearch = buildInitialTableModel(profil);
            jTableInitialSearch.setModel(tableModelInitialSearch);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTableInitialSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInitialSearchMouseClicked
//        try {
//            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
//        } catch (SQLException ex) {
//            Exceptions.printStackTrace(ex);
//        } catch (KasirException ex) {
//            Exceptions.printStackTrace(ex);
//        }
    }//GEN-LAST:event_jTableInitialSearchMouseClicked

    private void jTableInitialSearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInitialSearchMousePressed
//        try {
//            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
//        } catch (SQLException ex) {
//            Exceptions.printStackTrace(ex);
//        } catch (KasirException ex) {
//            Exceptions.printStackTrace(ex);
//        }
    }//GEN-LAST:event_jTableInitialSearchMousePressed

    private void jTableInitialSearchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInitialSearchMouseReleased
        try {
            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
            tableModelTunggakanProfil = buildTunggakanProfilTableModel(profil);
            jTableTunggakanProfil.setModel(tableModelTunggakanProfil);
            selectedProfileName.setText(profil.biodata.nama);
            tableModelTSum = buildTSumTableModel(profil);
            jTableTSum.setModel(tableModelTSum);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jTableInitialSearchMouseReleased

    private void jButtonTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransaksiActionPerformed
        // TODO add your handling code here:
        //new InputTransactionFrameSeparated(this.clerk, this.profil).setVisible(true);
        //new InputTransactionFrameSeparated(this.clerk, this.profil, paramIPSP).setVisible(true);
        new InputTransactionFrameSeparated(this, this.clerk, this.profil,paramIPPs, paramIPSP, paramSeragams, paramBukus, paramIKSs, paramILLs, paramIPSB, paramIUA, paramIUSs, paramOSISs, paramAttributes, paramPVTs, paramTabungans, paramSumbangans, paramPASB, paramCicilanHutangs, paramAlmamaters).setVisible(true);
    }//GEN-LAST:event_jButtonTransaksiActionPerformed

    private void jButtonSettingIuranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettingIuranActionPerformed
        // TODO add your handling code here:
        new InputIuranFrame(this.clerk, this.profil).setVisible(true);
        //new InputIuranPeriodicFrame(this.clerk, this.profil).setVisible(true);
        //new InputIuranRegularFrame(this.clerk, this.profil).setVisible(true);
    }//GEN-LAST:event_jButtonSettingIuranActionPerformed

    private void jButtonEditDeleteProfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditDeleteProfilActionPerformed
        // TODO add your handling code here:
        new InputProfilFrame(this.clerk, this.profil).setVisible(true);
    }//GEN-LAST:event_jButtonEditDeleteProfilActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        clearProfilComponents();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jInputSiswaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInputSiswaActionPerformed
        // TODO add your handling code here:
         new InputProfilFrame(this.clerk).setVisible(true);
    }//GEN-LAST:event_jInputSiswaActionPerformed

    private void jButtonSettingGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettingGLActionPerformed
        // TODO add your handling code here:
        new MapAccountGLFrame(this.clerk).setVisible(true);
    }//GEN-LAST:event_jButtonSettingGLActionPerformed

    private void jButtonTSumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSumActionPerformed
        // TODO add your handling code here:
        Kalender kalS = new Kalender(dateChooserComboTSumS.getSelectedDate().getTime());
        kalS.set(Calendar.HOUR, 0);
        kalS.set(Calendar.MINUTE, 0);
        kalS.set(Calendar.SECOND, 0);
        Kalender kalE = new Kalender(dateChooserComboTSumE.getSelectedDate().getTime());
        kalE.set(Calendar.HOUR, 23);
        kalE.set(Calendar.MINUTE, 59);
        kalE.set(Calendar.SECOND, 59);
        //Ngakalin CreateDate End biar sama dapet hari satu hari.
        kalE.add(Calendar.DATE, 1);
        try {
            tableModelTSum = buildTSumTableModel(kalS,kalE);
            jTableTSum.setModel(tableModelTSum);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonTSumActionPerformed

    private void cbCreatedDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCreatedDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCreatedDateActionPerformed

    private void jButtonSettlementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettlementActionPerformed
        try {
            // TODO add your handling code here:
            Control.TDetailToGL_Trans.kirimCoiiiiiiiiiiiiii();
            JOptionPane.showMessageDialog(rootPane, "Transfer Data ke Database Accounting Berhasil!\r\n");
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Transfer Data ke Database Accounting Gagal!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonSettlementActionPerformed

    private void jButtonRipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRipsActionPerformed
        // TODO add your handling code here: RIPS = Report Iuran Per Siswa
    }//GEN-LAST:event_jButtonRipsActionPerformed

    private void jButtonInsertKasirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertKasirActionPerformed
        // TODO add your handling code here:
        new InputClerkFrame(this.clerk).setVisible(true);
    }//GEN-LAST:event_jButtonInsertKasirActionPerformed

    private void jButtonPrintReportKasirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintReportKasirActionPerformed
        // TODO add your handling code here:
        try{
            Kalender start = new Kalender(dateChooserComboTSumS.getSelectedDate().getTime());
            Kalender end = new Kalender(dateChooserComboTSumE.getSelectedDate().getTime());
            start.set(Calendar.HOUR, 0);
            start.set(Calendar.MINUTE, 0);
            start.set(Calendar.SECOND, 0);
            end.set(Calendar.HOUR, 23);
            end.set(Calendar.MINUTE, 59);
            end.set(Calendar.SECOND, 59);
            printPenerimaanKasKasir(clerk, start, end);
        }catch(JRException ex){
            JOptionPane.showMessageDialog(rootPane, "Print Gagal!\r\n".concat(ex.toString()));
        }catch(PrinterException ex){
            JOptionPane.showMessageDialog(rootPane, "Print Gagal!\r\n".concat(ex.toString()));
        }catch(IllegalArgumentException ex){
            JOptionPane.showMessageDialog(rootPane, "Print Gagal!\r\nTidak ada transaksi pada tanggal yang dipilih\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonPrintReportKasirActionPerformed

    private void jTableInitialSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableInitialSearchKeyReleased
        // TODO add your handling code here:
        try {
            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jTableInitialSearchKeyReleased

    private void jTableTSumMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTSumMouseReleased
        // TODO add your handling code here:
        System.out.println("TSum ".concat(String.valueOf((Long)(jTableTSum.getValueAt(jTableTSum.getSelectedRow(), 0)))));
        tSumID = (Long)(jTableTSum.getValueAt(jTableTSum.getSelectedRow(), 0));
    }//GEN-LAST:event_jTableTSumMouseReleased

    private void jButtonTSumPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSumPrintActionPerformed
        try {
            TransactionSummary tsum = Control.selectTSummary(tSumID);
            Profil tempProfil = Control.selectProfil(tsum.noInduk);
            TableModel tm = buildTunggakanProfilTableModel(tempProfil);
            InputTransactionFrameSeparated itfs = new InputTransactionFrameSeparated(this, this.clerk, tempProfil,paramIPPs, paramIPSP, paramSeragams, paramBukus, paramIKSs, paramILLs, paramIPSB, paramIUA, paramIUSs, paramOSISs, paramAttributes, paramPVTs, paramTabungans, paramSumbangans, paramPASB, paramCicilanHutangs, paramAlmamaters);
            try {
                itfs.printBuktiPembayaran(tsum, tm, totalDebt);
            } catch (JRException ex) {
                Exceptions.printStackTrace(ex);
            } catch (PrinterException ex) {
                Exceptions.printStackTrace(ex);
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
    }//GEN-LAST:event_jButtonTSumPrintActionPerformed

    private void jButtonTSumEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSumEditActionPerformed
        // TODO add your handling code here:
        new InputEditTransactionSummaryFrame(this, this.tSumID, this.clerk).setVisible(true);
    }//GEN-LAST:event_jButtonTSumEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AppFrame().setVisible(true);
            }
        });
    }
    
   private TableModel buildInitialTableModel(Biodata bio) throws SQLException, KasirException{
       String columnNames[] = {"Nomor Induk", "Nama Siswa", "Sekolah", "Kelas"};
       Control.login("rusly", "123456");
       Set<Biodata> setBiodata = new HashSet<Biodata>();
       setBiodata.add(bio);
       Map<String, Profil> searchResultMap = new HashMap<String, Profil>();
       searchResultMap = Control.filterSelectProfils(setBiodata);
       Object[][] data = new Object[searchResultMap.size()][10];
       int i = 0;
       for(Map.Entry<String, Profil> entry: searchResultMap.entrySet()){
           data[i][0]= entry.getKey();
           data[i][1]= entry.getValue().currentLevel.level1;
           data[i][2]= entry.getValue().biodata.nama;
       }
       TableModel tm = new DefaultTableModel(data, columnNames);
       
       return tm;
       
   }
   
   private String tahunAjaran(int tahun){
       return String.valueOf(tahun).concat(" - ").concat(String.valueOf(tahun+1));
   }
   
   private TableModel buildInitialTableModel(Profil profil) throws SQLException, KasirException{
       String columnNames[] = {"Nomor Induk", "Nama Siswa", "Sekolah", "Kelas"};
       Set<Profil> setProfil = new HashSet<>();
       setProfil.add(profil);
       Map<String, Profil> searchResultMap = Control.filterSelectProfils(setProfil);
       Object[][] data = new Object[searchResultMap.size()][5];
       int i = 0;
       profils = new ArrayList<>();       
       if(searchResultMap.size() > 0){
        for(Map.Entry<String, Profil> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getKey();
            data[i][1]= entry.getValue().biodata.nama;
            data[i][2]= entry.getValue().currentLevel.level1;
            data[i][3]= entry.getValue().currentLevel.level2.toString().concat(" - "+entry.getValue().currentLevel.level3.toString());
            profils.add(entry.getValue());
            i++;
        }
       }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
   
   public boolean syncIuranDebt(Iuran.Tipe it, Long iuranID){
       if(it == Iuran.Tipe.IPP){
           System.out.println("Sync Iuran Debt IPP");
           System.out.println(iuranID);
       }
       return true;
   }
   
   public TableModel buildTunggakanProfilTableModel(Profil profil) throws SQLException, KasirException{
       String columnNames[] = {"Nama Iuran", "Jumlah Tunggakan", "Catatan"};
       Set<Profil> setProfil = new HashSet<>();
       setProfil.add(profil);
       Map<String, Profil> searchResultMap = Control.filterSelectProfils(setProfil);
       List<Tunggakan> tunggakans = new ArrayList<Tunggakan>();
       
       //Get Month and Year for calculate IuranPeriodic 12 times a year (Monthly)
       Calendar calendarRunning = Calendar.getInstance();
       int targetMonth = calendarRunning.get(Calendar.MONTH);
       int targetYear = calendarRunning.get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       
       //Tunggakan Iuran Iuran
       //IPP
       
       List<IPP> tunggakanIPPs = new ArrayList<IPP>();
       
       Set<IPP> ippFilters = new HashSet<>();
       ippFilters.add(new IPP(profil.noInduk, null, null));
       Map<Long, IPP> srmIPP =new HashMap<>();
       srmIPP = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
       int j = 0;
       int targetIndex = 12;
       if(srmIPP.size() > 0){
        for(Map.Entry<Long, IPP> entry: srmIPP.entrySet()){
            Float temp = 0f;
            if(targetYear == entry.getValue().chargedLevel.tahun){
                for(int i = 0 ; i < 12 ; i++){
                    if(i<targetMonth){
                        temp += entry.getValue().entries.get(i).debt;
                    }else{
                        entry.getValue().entries.get(i).debt = 0;
                        temp += entry.getValue().entries.get(i).debt;
                    }
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("IPP", temp, "IPP ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun))));
                    tunggakanIPPs.add(entry.getValue());
                }
            }else{
                for(int i = 0 ; i < 12 ; i++){
                    temp += entry.getValue().entries.get(i).debt;
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("IPP", temp, "IPP ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun))));
                    tunggakanIPPs.add(entry.getValue());
                }
            }
            
            temp = 0f;
            j++;
        }
        paramIPPs = new ArrayList<>(tunggakanIPPs);
       }

       //IPSP
       List<IPSP> tunggakanIPSPs = new ArrayList<>();
       Set<IPSP> ipspFilters = new HashSet<>();
       ipspFilters.add(new IPSP(profil.noInduk, null, 0.0f, null));
       Map<Long, IPSP> srmIPSP = new HashMap<>();
       srmIPSP = Control.exactFilterSelectIurans(Iuran.Tipe.IPSP, ipspFilters);
       j = 0;
       if(srmIPSP.size() > 0){
        for(Map.Entry<Long, IPSP> entry: srmIPSP.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("IPSP", entry.getValue().debt, "IPSP ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                paramIPSP = entry.getValue();
            }else{
                paramIPSP = null;
            }
            j++;
        }
       }
       
       //PASB
       List<PASB> tunggakanPASBs = new ArrayList<>();
       Set<PASB> pasbFilters = new HashSet<>();
       pasbFilters.add(new PASB(profil.noInduk, null, "Administrasi PASB", 0.0f, null));
       Map<Long, PASB> srmPASB = new HashMap<>();
       srmPASB = Control.exactFilterSelectIurans(Iuran.Tipe.PASB, pasbFilters);
       j = 0;
       if(srmPASB.size() > 0){
        for(Map.Entry<Long, PASB> entry: srmPASB.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("PASB", entry.getValue().debt, "PASB ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                paramPASB = entry.getValue();
            }else{
                paramPASB = null;
            }
            j++;
        }
       }
       
       //IPSB
       List<IPSB> tunggakanIPSBs = new ArrayList<>();
       Set<IPSB> ipsbFilters = new HashSet<>();
       ipsbFilters.add(new IPSB(profil.noInduk, null, 0.0f, null));
       Map<Long, IPSB> srmIPSB = new HashMap<>();
       srmIPSB = Control.exactFilterSelectIurans(Iuran.Tipe.IPSB, ipsbFilters);
       j = 0;
       if(srmIPSB.size() > 0){
        for(Map.Entry<Long, IPSB> entry: srmIPSB.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("IPSB", entry.getValue().debt, "IPSB ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                paramIPSB = entry.getValue();
            }else{
                paramIPSB = null;
            }
            j++;
        }
       }
       
       //IUA
       List<IUA> tunggakanIUAs = new ArrayList<>();
       Set<IUA> iuaFilters = new HashSet<>();
       iuaFilters.add(new IUA(profil.noInduk, null, 0.0f, null));
       Map<Long, IUA> srmIUA = new HashMap<>();
       srmIUA = Control.exactFilterSelectIurans(Iuran.Tipe.IUA, iuaFilters);
       j = 0;
       if(srmIUA.size() > 0){
        for(Map.Entry<Long, IUA> entry: srmIUA.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("IUA", entry.getValue().debt, "IUA ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                paramIUA = entry.getValue();
            }else{
                paramIUA = null;
            }
            j++;
        }
       }
       
       //IKS
       List<IKS> tunggakanIKSs = new ArrayList<>();
       Set<IKS> iksFilters = new HashSet<>();
       iksFilters.add(new IKS(profil.noInduk, null, null));
       Map<Long, IKS> srmIKS = new HashMap<>();
       srmIKS = Control.exactFilterSelectIurans(Iuran.Tipe.IKS, iksFilters);
       
       if(srmIKS.size() > 0){
        for(Map.Entry<Long, IKS> entry: srmIKS.entrySet()){
            if(entry.getValue().entries.get(0).debt > 0){
                tunggakans.add(new Tunggakan("IKS", entry.getValue().entries.get(0).debt, "IKS ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                tunggakanIKSs.add(entry.getValue());
            }
           
        }
        paramIKSs = new ArrayList<>(tunggakanIKSs);
       }
       
       //OSIS
       List<OSIS> tunggakanOSISs = new ArrayList<>();
       Set<OSIS> osisFilters = new HashSet<>();
       osisFilters.add(new OSIS(profil.noInduk, null, null));
       Map<Long, OSIS> srmOSIS = new HashMap<>();
       srmOSIS = Control.exactFilterSelectIurans(Iuran.Tipe.OSIS, osisFilters);
       
       if(srmOSIS.size() > 0){
        for(Map.Entry<Long, OSIS> entry: srmOSIS.entrySet()){
            if(entry.getValue().entries.get(0).debt > 0){
                tunggakans.add(new Tunggakan("OSIS", entry.getValue().entries.get(0).debt, "OSIS ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                tunggakanOSISs.add(entry.getValue());
            }
            
        }
        paramOSISs = new ArrayList<>(tunggakanOSISs);
       }
       
       //IUS
       List<IUS> tunggakanIUSs = new ArrayList<>();
       Set<IUS> iusFilters = new HashSet<>();
       iusFilters.add(new IUS(profil.noInduk, null, null));
       Map<Long, IUS> srmIUS = new HashMap<>();
       srmIUS = Control.exactFilterSelectIurans(Iuran.Tipe.IUS, iusFilters);
       
       if(srmIUS.size() > 0){
        for(Map.Entry<Long, IUS> entry: srmIUS.entrySet()){
            for(int i = 0; i < 12/IUS.periodInMonth; i++){
                if(entry.getValue().entries.get(i).debt > 0){
                    tunggakans.add(new Tunggakan("IUS", entry.getValue().entries.get(i).debt, "IUS ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                    tunggakanIUSs.add(entry.getValue());
                }
            }
            
        }
        paramIUSs = new ArrayList<>(tunggakanIUSs);
       }
       
       //PVT
       
       List<PVT> tunggakanPVTs = new ArrayList<>();
       Set<PVT> pvtFilters = new HashSet<>();
       pvtFilters.add(new PVT(profil.noInduk, null, null));
       Map<Long, PVT> srmPVT = new HashMap<>();
       srmPVT = Control.exactFilterSelectIurans(Iuran.Tipe.PVT, pvtFilters);
       if(srmPVT.size() > 0){
        for(Map.Entry<Long, PVT> entry: srmPVT.entrySet()){
            for(int i = 0; i < 12/PVT.periodInMonth; i++){
                if(entry.getValue().entries.get(i).debt > 0){
                    tunggakans.add(new Tunggakan("PVT", entry.getValue().entries.get(i).debt, "PVT ".concat(String.valueOf(entry.getValue().chargedLevel.tahun))));
                    tunggakanPVTs.add(entry.getValue());
                }
            }
        }
        paramPVTs = new ArrayList<>(tunggakanPVTs);
       }else{
           paramPVTs = new ArrayList<>(tunggakanPVTs);
       }
       
       //Seragam
       paramSeragams =  new ArrayList<>();
       Set<Seragam> seragamFilters = new HashSet<>();
       seragamFilters.add(new Seragam(profil.noInduk,null, null, 0F, null));
       Map<Long, Seragam> srmSeragam = new HashMap<>();
       srmSeragam = Control.exactFilterSelectIurans(Iuran.Tipe.Seragam, seragamFilters);
       j = 0;
       if(srmSeragam.size() > 0){
        for(Map.Entry<Long, Seragam> entry: srmSeragam.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Seragam", entry.getValue().debt, entry.getValue().transactName));
                paramSeragams.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Attribute
       paramAttributes = new ArrayList<>();
       Set<Attribute> attributeFilters = new HashSet<>();
       attributeFilters.add(new Attribute(profil.noInduk,null, null, 0F, null));
       Map<Long, Attribute> srmAttribute = new HashMap<>();
       srmAttribute = Control.exactFilterSelectIurans(Iuran.Tipe.Attribute, attributeFilters);
       j = 0;
       if(srmAttribute.size() > 0){
        for(Map.Entry<Long, Attribute> entry: srmAttribute.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Attribute", entry.getValue().debt, entry.getValue().transactName));
                paramAttributes.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Buku
       paramBukus = new ArrayList<>();
       Set<Buku> bukuFilters = new HashSet<>();
       bukuFilters.add(new Buku(profil.noInduk,null, null, 0F, null));
       Map<Long, Buku> srmBuku = new HashMap<>();
       srmBuku = Control.exactFilterSelectIurans(Iuran.Tipe.Buku, bukuFilters);
       j = 0;
       if(srmBuku.size() > 0){
        for(Map.Entry<Long, Buku> entry: srmBuku.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Buku", entry.getValue().debt, entry.getValue().transactName));
                paramBukus.add(entry.getValue());
            }
            j++;
        }
       }
       
       //ILL
       paramILLs = new ArrayList<>();
       Set<ILL> illFilters = new HashSet<>();
       illFilters.add(new ILL(profil.noInduk,null, null, 0F, null));
       Map<Long, ILL> srmILL = new HashMap<>();
       srmILL = Control.exactFilterSelectIurans(Iuran.Tipe.ILL, illFilters);
       j = 0;
       if(srmILL.size() > 0){
        for(Map.Entry<Long, ILL> entry: srmILL.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("ILL", entry.getValue().debt, entry.getValue().transactName));
                paramILLs.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Tabungan
       paramTabungans = new ArrayList<>();
       Set<Tabungan> tabunganFilters = new HashSet<>();
       tabunganFilters.add(new Tabungan(profil.noInduk,null, null, 0F, null));
       Map<Long, Tabungan> srmTabungan = new HashMap<>();
       srmTabungan = Control.exactFilterSelectIurans(Iuran.Tipe.Tabungan, tabunganFilters);
       j = 0;
       if(srmTabungan.size() > 0){
        for(Map.Entry<Long, Tabungan> entry: srmTabungan.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Tabungan", entry.getValue().debt, entry.getValue().transactName));
                paramTabungans.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Sumbangan
       paramSumbangans = new ArrayList<>();
       Set<Sumbangan> sumbanganFilters = new HashSet<>();
       sumbanganFilters.add(new Sumbangan(profil.noInduk,null, null, 0F, null));
       Map<Long, Sumbangan> srmSumbangan = new HashMap<>();
       srmSumbangan = Control.exactFilterSelectIurans(Iuran.Tipe.Sumbangan, sumbanganFilters);
       j = 0;
       if(srmSumbangan.size() > 0){
        for(Map.Entry<Long, Sumbangan> entry: srmSumbangan.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Sumbangan", entry.getValue().debt, entry.getValue().transactName));
                paramSumbangans.add(entry.getValue());
            }
            j++;
        }
       }
       
       //CicilanHutang
       
       List<CicilanHutang> tunggakanCicilanHutangs = new ArrayList<CicilanHutang>();
       
       Set<CicilanHutang> cicilanHutangFilters = new HashSet<>();
       cicilanHutangFilters.add(new CicilanHutang(profil.noInduk, null, null));
       Map<Long, CicilanHutang> srmCicilanHutang =new HashMap<>();
       srmCicilanHutang = Control.exactFilterSelectIurans(Iuran.Tipe.CicilanHutang, cicilanHutangFilters);
       j = 0;
       targetIndex = 12;
       if(srmCicilanHutang.size() > 0){
        for(Map.Entry<Long, CicilanHutang> entry: srmCicilanHutang.entrySet()){
            Float temp = 0f;
            if(targetYear == entry.getValue().chargedLevel.tahun){
                for(int i = 0 ; i < 12 ; i++){
                    if(i<targetMonth){
                        temp += entry.getValue().entries.get(i).debt;
                    }else{
                        entry.getValue().entries.get(i).debt = 0;
                        temp += entry.getValue().entries.get(i).debt;
                    }
                }
                if(temp > 0){
                    //tunggakans.add(new Tunggakan("CicilanHutang", temp, "CicilanHutang ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun))));
                    tunggakans.set(0,new Tunggakan(tunggakans.get(0).tipeIuran, tunggakans.get(0).debt + temp, tunggakans.get(0).note));
                    tunggakanCicilanHutangs.add(entry.getValue());
                }
            }else{
                for(int i = 0 ; i < 12 ; i++){
                    temp += entry.getValue().entries.get(i).debt;
                }
                if(temp > 0){
                    //tunggakans.add(new Tunggakan("CicilanHutang", temp, "CicilanHutang ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun))));
                    tunggakans.set(0,new Tunggakan(tunggakans.get(0).tipeIuran, tunggakans.get(0).debt + temp, tunggakans.get(0).note));
                    tunggakanCicilanHutangs.add(entry.getValue());
                }
            }
            
            temp = 0f;
            j++;
        }
        paramCicilanHutangs = new ArrayList<>(tunggakanCicilanHutangs);
       }
       
       JFormattedTextField debtFTF = new JFormattedTextField(0.0);
       debtFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       
       
       Object[][] data = new Object[tunggakans.size()][3];
       totalDebt= 0f;
       for(int i = 0 ; i < tunggakans.size(); i++){
           data[i][0] = getModifiedNameTipeIuran(tunggakans.get(i).tipeIuran);
           debtFTF.setValue(tunggakans.get(i).debt);
           data[i][1] = debtFTF.getText();
           data[i][2] = tunggakans.get(i).note;
           totalDebt += tunggakans.get(i).debt;
       }
       tunggakanTotalAmount = NumberFormat.getInstance().format(totalDebt);
       selectedProfilTotalDebt.setText("Jumlah Tunggakan \t: Rp ".concat(tunggakanTotalAmount));
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
   
   private String getModifiedNameTipeIuran(String tipeIuran){
       String retVal ="";
       switch(tipeIuran){
        case "IPP" : retVal="IPP";
            break;
        case "IPSP" : retVal="IPSP";
            break;
        case "Attribute" : retVal ="Raport / Kartu";
            break;
        case "Buku" :   retVal = "Buku";
            break;
        case "IKS"  :   retVal = "IKS / Komputer";
            break;
        case "ILL"  :   retVal = "Iuran Lain-Lain";
            break;
        case "IPSB" :   retVal = "IPSB / MOPD";
            break;
        case "IUA"  :   retVal = "UAN";
            break;
        case "IUS"  :   retVal = "SEMESTER";
            break;
        case "OSIS" :   retVal = "OSIS";
            break;
        case "PVT"  :   retVal = "Praktek Sinematografi";
            break;
        case "Seragam"  :   retVal = "Seragam";
            break;
        case "Sumbangan"    : retVal = "Sumbangan";
            break;
        case "Tabungan" :   retVal = "Tabungan";
            break;
        default : retVal = tipeIuran;
            break;
       }
       return retVal;
   }
   
   private String getTahunAjaran(int ta){
       return String.valueOf(ta).concat(" - ").concat(String.valueOf(ta+1));
   }
   
   private TableModel buildTSumTableModel(Kalender kalS, Kalender kalE) throws SQLException, KasirException{
       String columnNames[] = {"ID", "Nama", "Tanggal", "Jumlah", "Catatan"};
       Set<TransactionSummary> setTSum = new HashSet<>();
       TransactionSummary tSum = new TransactionSummary();
       if(cbCreatedDate.isSelected() && !cbLastUpdateDate.isSelected()){
            tSum.createDateS = kalS;
            tSum.createDateE = kalE;
       }else if(!cbCreatedDate.isSelected() && cbLastUpdateDate.isSelected()){
            tSum.lastUpdateDateS = kalS;
            tSum.lastUpdateDateE = kalE;
       }else if(cbCreatedDate.isSelected() && cbLastUpdateDate.isSelected()){
            tSum.createDateS = kalS;
            tSum.createDateE = kalE;
            tSum.lastUpdateDateS = kalS;
            tSum.lastUpdateDateE = kalE;
       }else{
           tSum.createDateS = null;
       }
       
       setTSum.add(tSum);
       Map<Long, TransactionSummary> searchResultMap = Control.filterSelectTSummaries(setTSum);
       Object[][] data = new Object[searchResultMap.size()][5];
       int i = 0;
       ArrayList tSums = new ArrayList<>();
       JFormattedTextField tSumFTF = new JFormattedTextField(0.0);
       tSumFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, TransactionSummary> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getKey().longValue();
            data[i][1]= getProfileName(entry.getValue().noInduk);
            data[i][2]= new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(entry.getValue().createDate.toDate());
            tSumFTF.setValue(entry.getValue().totalAmount);
            data[i][3]= tSumFTF.getText();
            data[i][4]= entry.getValue().note;
            
            tSums.add(entry.getValue());
            i++;
        }
       }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
   
   private TableModel buildTSumTableModel(Profil p) throws SQLException, KasirException{
       String columnNames[] = {"ID", "Nama", "Tanggal", "Jumlah", "Catatan"};
       Set<TransactionSummary> setTSum = new HashSet<>();
       TransactionSummary tSum = new TransactionSummary();
       tSum.noInduk = p.noInduk;
       
       setTSum.add(tSum);
       Map<Long, TransactionSummary> searchResultMap = Control.filterSelectTSummaries(setTSum);
       Object[][] data = new Object[searchResultMap.size()][5];
       int i = 0;
       ArrayList tSums = new ArrayList<>();
       JFormattedTextField tSumFTF = new JFormattedTextField(0.0);
       tSumFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, TransactionSummary> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getKey().longValue();
            data[i][1]= getProfileName(entry.getValue().noInduk);
            data[i][2]= new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(entry.getValue().createDate.toDate());
            tSumFTF.setValue(entry.getValue().totalAmount);
            data[i][3]= tSumFTF.getText();
            data[i][4]= entry.getValue().note;
            
            tSums.add(entry.getValue());
            i++;
        }
       }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
    
   private String getProfileName(String noInduk){
       String retVal = "";
       try{
           retVal = Control.selectProfil(noInduk).biodata.nama;
       }catch(SQLException ex){
           retVal = "";
       }catch(KasirException ex){
           retVal = "";
       }
       return retVal;
   }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbCreatedDate;
    private javax.swing.JCheckBox cbLastUpdateDate;
    private datechooser.beans.DateChooserCombo dateChooserComboTSumE;
    private datechooser.beans.DateChooserCombo dateChooserComboTSumS;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonEditDeleteProfil;
    private javax.swing.JButton jButtonInsertKasir;
    private javax.swing.JButton jButtonPrintReportKasir;
    private javax.swing.JButton jButtonRips;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSettingGL;
    private javax.swing.JButton jButtonSettingIuran;
    private javax.swing.JButton jButtonSettlement;
    private javax.swing.JButton jButtonTSum;
    private javax.swing.JButton jButtonTSumEdit;
    private javax.swing.JButton jButtonTSumPrint;
    private javax.swing.JButton jButtonTransaksi;
    private javax.swing.JComboBox jComboBoxLevel1;
    private javax.swing.JComboBox jComboBoxLevel2;
    private javax.swing.JComboBox jComboBoxLevel3;
    private javax.swing.JButton jInputSiswa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelKelas;
    private javax.swing.JLabel jLabelNamaSiswa;
    private javax.swing.JLabel jLabelNomorInduk;
    private javax.swing.JLabel jLabelSekolah;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableInitialSearch;
    private javax.swing.JTable jTableTSum;
    private javax.swing.JTable jTableTunggakanProfil;
    private javax.swing.JTextField jTextFieldNamaSiswa;
    private javax.swing.JTextField jTextFieldNomorInduk;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JLabel selectedProfilTotalDebt;
    private javax.swing.JLabel selectedProfileName;
    // End of variables declaration//GEN-END:variables
    private javax.swing.table.TableModel tableModelInitialSearch;
    private javax.swing.table.TableModel tableModelTSum;
    private javax.swing.table.TableModel tableModelTunggakanProfil;
    private java.util.ArrayList<Profil> profils;
    private pelajar.Profil profil;
    private Clerk clerk;

    private void clearProfilComponents() {
        jTextFieldNamaSiswa.setText("");
        jTextFieldNomorInduk.setText("");
        jComboBoxLevel1.setSelectedIndex(0);
        jComboBoxLevel2.setSelectedIndex(0);
        jComboBoxLevel3.setSelectedIndex(0);
    }
    
    private void printPenerimaanKasKasir(Clerk cl, Kalender startDate, Kalender endDate) throws JRException, PrinterException {
                  
        
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
//        HashMap jasperParameter = new HashMap();
//        jasperParameter.put("Param_TransactionSummary_ID", ((Long)transactionSummary.id).intValue());
//        jasperParameter.put("Param_Clerk_ID", transactionSummary.idClerk);
//        jasperParameter.put("Param_Profil_ID", profil.noInduk);
//        jasperParameter.put("SUBREPORT_DIR", "C://printout//");
//        jasperParameter.put("Param_TotalAmountTerbilang", totalATString);
//        
//        
//        // Tunggakan IPP
////        jasperParameter.put("Param_Tunggakan_IPP", tunggakanIPP);
////        jasperParameter.put("Param_Tunggakan_IPP_Amount", unpaidIPP);
////        jasperParameter.put("Param_Tunggakan_IPP_Each_Amount", tunggakanIPPEachAmountString);
//        
//        // Tunggakan IPSP
//        
//        
//        // Tunggakan Seragam
////        jasperParameter.put("Param_Tunggakan_Seragam", tunggakanSeragam);
////        jasperParameter.put("Param_Tunggakan_Seragam_Amount", unpaidSeragam);
//        
//        // Tunggakan Buku
////        jasperParameter.put("Param_Tunggakan_Buku", tunggakanBuku);
////        jasperParameter.put("Param_Tunggakan_Buku_Amount", unpaidBuku);
//        
//        
//        // Tunggakan DOANG
//        String tunggakanDoang = "";
//        String tunggakanDoangAmount = "";
//        
//        for(int i = 0; i < tm.getRowCount(); i++){
//            tunggakanDoang = tunggakanDoang.concat(tm.getValueAt(i, 2).toString()).concat("\r\n");
//            tunggakanDoangAmount = tunggakanDoangAmount.concat(tm.getValueAt(i, 1).toString()).concat("\r\n");
//            System.out.println(tm.getValueAt(i,0));
//            System.out.println(tm.getValueAt(i,1));
//            System.out.println(tm.getValueAt(i,2));
//        }
//        String tunggakanTotalAmount = NumberFormat.getInstance().format(totalDebt);
//        tunggakanTotalAmount = "Rp ".concat(tunggakanTotalAmount);
//        jasperParameter.put("Param_Tunggakan", tunggakanDoang);
//        jasperParameter.put("Param_Tunggakan_Amount", tunggakanDoangAmount); 
//        jasperParameter.put("Param_Tunggakan_Total_Amount", tunggakanTotalAmount);
//        //dari HKD
//        
//        String fileName = "C://printout//PrintoutBuktiPembayaran.jrxml";
//            String filetoPrint = "C://printout//PrintoutBuktiPembayaran.jrprint";
//            String filetoFill = "C://printout//PrintoutBuktiPembayaran.jasper";
//            String filePdf = "C://printout//PrintoutBuktiPembayaran.pdf";
//            
//            //JasperCompileManager always make file named: "report name.jasper"
//            JasperCompileManager.compileReportToFile(fileName);
//            
//            
//            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
//            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
//            JasperViewer.viewReport(jp, false);
//            JasperExportManager.exportReportToPdfFile(jp, filePdf);
//            JasperPrintManager.printReport(filetoPrint, true);
//        
//        //end dari HKD
//        
//        
//        
//        // jrxml compiling process
//        jasperReport = JasperCompileManager.compileReport
//        ("C://printout//PrintoutBuktiPembayaran.jrxml");
//
//        // filling report with data from data source
//
//        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
//        // exporting process
//        // 1- export to PDF
//        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//sample_report.pdf");
//
//        // 2- export to HTML
//        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//sample_report.html" ); 
//
//        // 3- export to Excel sheet
//        JRXlsExporter exporter = new JRXlsExporter();
//        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
//        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//sample_report.xls" );
//
//        exporter.exportReport();
        
        
        
        // connection is the data source we used to fetch the data from
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
        HashMap jasperParameter = new HashMap();
        jasperParameter.put("Param_Clerk_ID", Long.valueOf(cl.id));
        jasperParameter.put("Param_Start_Date", startDate.toTimestamp());
        jasperParameter.put("Param_End_Date", endDate.toTimestamp());
        
        
         String fileName = "C://printout//PrintOutReportPerKasir.jrxml";
            String filetoPrint = "C://printout//PrintOutReportPerKasir.jrprint";
            String filetoFill = "C://printout//PrintOutReportPerKasir.jasper";
            String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutReportPerKasir.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutReportPerKasir.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutReportPerKasir.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutReportPerKasir.xls" );

        exporter.exportReport();
        // jrxml compiling process
//        jasperReport = JasperCompileManager.compileReport
//        ("C://Users//Master//Documents//NetBeansProjects//Kasir7//src//printout//PrintoutBuktiPembayaran.jrxml");
//        jasperReport = JasperCompileManager.compileReport
//        ("C://printout//PrintOutReportPerKasir.jrxml");
//
//        // filling report with data from data source
//
//        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
//        // exporting process
//        // 1- export to PDF
////        JasperExportManager.exportReportToPdfFile(jasperPrint, "F://sample_report.pdf");
//        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//kasir_report.pdf");
//
//        // 2- export to HTML
////        JasperExportManager.exportReportToHtmlFile(jasperPrint, "F://sample_report.html" ); 
//        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//kasir_report.html" ); 
//
//        // 3- export to Excel sheet
//        JRXlsExporter exporter = new JRXlsExporter();
//        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
//        //exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "F://sample_report.xls" );
//        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//kasir_report.xls" );
//
//        exporter.exportReport();
//       
//        PrinterJob job = PrinterJob.getPrinterJob();
//        PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();
//        printRequestAttributeSet.add(OrientationRequested.PORTRAIT);
//        printRequestAttributeSet.add(MediaSizeName.ISO_A4); 
//        MediaSizeName mediaSizeName = MediaSize.findMedia(64,25,MediaPrintableArea.MM);
//        printRequestAttributeSet.add(mediaSizeName);
//        printRequestAttributeSet.add(new Copies(1));
//        JRPrintServiceExporter exporter1;
//        exporter1 = new JRPrintServiceExporter();
//        //jasperParameter.put(JRExporterParameter.JASPER_PRINT, jasperPrint);
//        jasperParameter.put(JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, printRequestAttributeSet);
//        jasperParameter.put(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.TRUE);
//        jasperParameter.put(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.TRUE);
//        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
//        jasperParameter.put(JRExporterParameter.JASPER_PRINT, jasperPrint);
//        System.out.println(jasperPrint.getPages().size());
//        exporter1.setParameters(jasperParameter);
//        exporter1.exportReport();
//        
//        job.print(printRequestAttributeSet);
        
    }
}

class Tunggakan{
    String tipeIuran;
    Float debt;
    String note;
    public Tunggakan(String ti, Float d, String n){
        tipeIuran = ti;
        debt = d;
        note = n;
    }
}
