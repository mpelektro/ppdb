/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import java.sql.SQLException;
import java.util.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Clerk;
import kasir.Control;
import org.openide.util.Exceptions;
import pelajar.Profil;
import sak.Kalender;
import sak.KasirException;


/**
 *
 * @author Master
 */
public class InputEditTransactionSummaryFrame extends javax.swing.JFrame {
    private ArrayList<IuranTransaction> transactionList;
    private TableModel allTransactionTableModel;
    private float totalAmount;
    private TransactionSummary transactionSummary;
    private Long tSumID;
    private Clerk clerk;
    private Profil profil;
    private AppFrame appFrame;
    /**
     * Creates new form InputEditTransactionSummaryFrame
     */
    public InputEditTransactionSummaryFrame() {
        initComponents();
    }
    
    public InputEditTransactionSummaryFrame(AppFrame af, Long id, Clerk c) {
        appFrame = af;
        tSumID = id;
        clerk = c;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allTransactionTable = new javax.swing.JTable();
        jTextFieldTransactionSummaryNote = new javax.swing.JTextField();
        jLabelClerkName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        try{
            prepareTransactions(tSumID);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }

        allTransactionTable.setModel(allTransactionTableModel);
        allTransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                allTransactionTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(allTransactionTable);

        jTextFieldTransactionSummaryNote.setText(transactionSummary.note);
        jTextFieldTransactionSummaryNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTransactionSummaryNoteActionPerformed(evt);
            }
        });

        jLabelClerkName.setText(clerk.nama);
        jLabelClerkName.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelClerkName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldTransactionSummaryNote, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldTransactionSummaryNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelClerkName)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldTransactionSummaryNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTransactionSummaryNoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTransactionSummaryNoteActionPerformed

    private void allTransactionTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allTransactionTableMouseReleased
        // TODO add your handling code here:
        appFrame.syncIuranDebt(Iuran.Tipe.IPP, tSumID);
    }//GEN-LAST:event_allTransactionTableMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InputEditTransactionSummaryFrame().setVisible(true);
            }
        });
    }
    
    private void prepareTransactions(Long TSumID) throws SQLException, KasirException{
        transactionList = new ArrayList<IuranTransaction>();
        
        TransactionSummary transactionSummary = Control.selectTSummary(TSumID);
        jTextFieldTransactionSummaryNote.setText(transactionSummary.note);
        //IDD Part
        List<IDDTransactionDetail> iddTDetails;
        try {
            iddTDetails = Control.selectTDetails(TransactionDetail.Tipe.IDDTransaction, IDDTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iddTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iddTDetails.get(i).idIuran, iddTDetails.get(i).amount, iddTDetails.get(i).note, Iuran.Tipe.IDD));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IPSP Part
        List<IPSPTransactionDetail> ipspTDetails;
        try {
            ipspTDetails = Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPSPTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < ipspTDetails.size(); i++){
                transactionList.add(new IuranTransaction(ipspTDetails.get(i).idIuran, ipspTDetails.get(i).amount, ipspTDetails.get(i).note, Iuran.Tipe.IPSP));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IPSB Part
        List<IPSBTransactionDetail> ipsbTDetails;
        try {
            ipsbTDetails = Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPSBTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < ipsbTDetails.size(); i++){
                transactionList.add(new IuranTransaction(ipsbTDetails.get(i).idIuran, ipsbTDetails.get(i).amount, ipsbTDetails.get(i).note, Iuran.Tipe.IPSB));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IUA Part
        List<IUATransactionDetail> iuaTDetails;
        try {
            iuaTDetails = Control.selectTDetails(TransactionDetail.Tipe.IUATransaction, IUATransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iuaTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iuaTDetails.get(i).idIuran, iuaTDetails.get(i).amount, iuaTDetails.get(i).note, Iuran.Tipe.IUA));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Seragam PART
        List<SeragamTransactionDetail> seragamTDetails;
        try {
            seragamTDetails = Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, SeragamTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < seragamTDetails.size(); i++){
                transactionList.add(new IuranTransaction(seragamTDetails.get(i).idIuran, seragamTDetails.get(i).amount, seragamTDetails.get(i).note, Iuran.Tipe.Seragam));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        //Attribute PART
        List<AttributeTransactionDetail> attributeTDetails;
        try {
            attributeTDetails = Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, AttributeTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < attributeTDetails.size(); i++){
                transactionList.add(new IuranTransaction(attributeTDetails.get(i).idIuran, attributeTDetails.get(i).amount, attributeTDetails.get(i).note, Iuran.Tipe.Attribute));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Buku PART
        List<BukuTransactionDetail> bukuTDetails;
        try {
            bukuTDetails = Control.selectTDetails(TransactionDetail.Tipe.BukuTransaction, BukuTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < bukuTDetails.size(); i++){
                transactionList.add(new IuranTransaction(bukuTDetails.get(i).idIuran, bukuTDetails.get(i).amount, bukuTDetails.get(i).note, Iuran.Tipe.Buku));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //ILL PART
        List<ILLTransactionDetail> illTDetails;
        try {
            illTDetails = Control.selectTDetails(TransactionDetail.Tipe.ILLTransaction, ILLTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < illTDetails.size(); i++){
                transactionList.add(new IuranTransaction(illTDetails.get(i).idIuran, illTDetails.get(i).amount, illTDetails.get(i).note, Iuran.Tipe.ILL));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Tabungan PART
        List<TabunganTransactionDetail> tabunganTDetails;
        try {
            tabunganTDetails = Control.selectTDetails(TransactionDetail.Tipe.TabunganTransaction, TabunganTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < tabunganTDetails.size(); i++){
                transactionList.add(new IuranTransaction(tabunganTDetails.get(i).idIuran, tabunganTDetails.get(i).amount, tabunganTDetails.get(i).note, Iuran.Tipe.Tabungan));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Sumbangan PART
        List<SumbanganTransactionDetail> sumbanganTDetails;
        try {
            sumbanganTDetails = Control.selectTDetails(TransactionDetail.Tipe.SumbanganTransaction, SumbanganTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < sumbanganTDetails.size(); i++){
                transactionList.add(new IuranTransaction(sumbanganTDetails.get(i).idIuran, sumbanganTDetails.get(i).amount, sumbanganTDetails.get(i).note, Iuran.Tipe.Sumbangan));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IPP PART
       List<IPPTransactionDetail> ippTDetails;
        try {
            ippTDetails = Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < ippTDetails.size(); i++){
                transactionList.add(new IuranTransaction(ippTDetails.get(i).idIuran, ippTDetails.get(i).amount, ippTDetails.get(i).note, Iuran.Tipe.IPP));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        //IUS PART
        List<IUSTransactionDetail> iusTDetails;
        try {
            iusTDetails = Control.selectTDetails(TransactionDetail.Tipe.IUSTransaction, IUSTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iusTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iusTDetails.get(i).idIuran, iusTDetails.get(i).amount, iusTDetails.get(i).note, Iuran.Tipe.IUS));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
   
        //IKS PART
        List<IKSTransactionDetail> iksTDetails;
        try {
            iksTDetails = Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IKSTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iksTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iksTDetails.get(i).idIuran, iksTDetails.get(i).amount, iksTDetails.get(i).note, Iuran.Tipe.IKS));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        //PVT PART
        List<PVTTransactionDetail> pvtTDetails;
        try {
            pvtTDetails = Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, PVTTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < pvtTDetails.size(); i++){
                transactionList.add(new IuranTransaction(pvtTDetails.get(i).idIuran, pvtTDetails.get(i).amount, pvtTDetails.get(i).note, Iuran.Tipe.PVT));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //OSIS PART
        List<OSISTransactionDetail> osisTDetails;
        try {
            osisTDetails = Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, OSISTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < osisTDetails.size(); i++){
                transactionList.add(new IuranTransaction(osisTDetails.get(i).idIuran, osisTDetails.get(i).amount, osisTDetails.get(i).note, Iuran.Tipe.OSIS));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        allTransactionTableModel = buildAllTransactionTableModel(transactionList);
        allTransactionTable.setModel(allTransactionTableModel);
//TRANSACTION SUMMARY PART        
        transactionSummary.totalAmount = totalAmount;
        transactionSummary.note = jTextFieldTransactionSummaryNote.getText();
        transactionSummary.createDate = new Kalender(System.currentTimeMillis());
        this.transactionSummary = transactionSummary;
//        jTextFieldTransactionSummaryNote1.setText(jTextFieldTransactionSummaryNote.getText());
//        jTextFieldTSumTotalAmount.setText(String.valueOf(totalAmount));
    }
    
    private TableModel buildAllTransactionTableModel(ArrayList<IuranTransaction> at) throws SQLException, KasirException {
       String columnNames[] = {"Tipe Iuran", "Jumlah", "Catatan"};
       Object[][] data = new Object[at.size()][3];
         
        for(int i = 0 ; i < at.size(); i++){
            data[i][0]= at.get(i).tipeIuran;
            data[i][1]= at.get(i).amount; 
            data[i][2]= at.get(i).note;
        }
       
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                    return false;
            }
       };
       return tm;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allTransactionTable;
    private javax.swing.JLabel jLabelClerkName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldTransactionSummaryNote;
    // End of variables declaration//GEN-END:variables
}
class IuranTransaction{
    Long tDetailID;
    Iuran.Tipe tipeIuran;
    Float amount;
    String note;
    public IuranTransaction(Long id, Float a, String n, Iuran.Tipe it){
        tDetailID = id;
        amount = a;
        note = n;
        tipeIuran = it;
    }
}
