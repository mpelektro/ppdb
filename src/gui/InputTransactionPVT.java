/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.*;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Control;
import org.openide.util.Exceptions;
import pelajar.Level;
import pelajar.Profil;
import printout.TunggakanBean;
import sak.KasirException;

/**
 *
 * @author Master
 */
public class InputTransactionPVT extends javax.swing.JFrame {
    Profil profil;
    private TableModel tableModelPVT;
    private PVT pvtFromDB;
    public List<Integer> tahunPVT;
    public ArrayList<Float> iDDAmounts;
    public ArrayList<Float> beasiswaAmounts;
    public ArrayList<Float> beasiswaCostAmounts;
    public ArrayList<Float> pVTAmounts;
    private PVT pvtCurrent;
    private PVT pvtStoreToDB;
    private IDD idd;
    private InputTransactionFrameSeparated itfs;
    private final String[] namaBulan = {"PVT"};
    private float unpaidPVT;
    private ComboBoxModel tahunComboBoxModel;
    private String tunggakanPVTString = new String("");
    private String tunggakanPVTEachAmountString = new String("");
    /**
     * Creates new form InputTransactionPVT
     */
    
    public InputTransactionPVT(Profil profil, InputTransactionFrameSeparated itfs) {
        this.profil = profil;
        this.itfs = itfs;
        try {
            tableModelPVT = buildPVTTableModel(profil, profil.currentLevel.tahun);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelIPP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelTahun = new javax.swing.JLabel();
        jComboBoxTahun = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jUnpaidPVT = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTablePVT = new javax.swing.JTable();
        jButtonBayarIUS = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jFormattedTextFieldIDDSaldo = new javax.swing.JFormattedTextField();

        setTitle(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.title")); // NOI18N

        jPanelIPP.setMinimumSize(new java.awt.Dimension(570, 380));
        jPanelIPP.setPreferredSize(new java.awt.Dimension(680, 450));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.jLabel1.text")); // NOI18N

        jLabelTahun.setText(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.jLabelTahun.text")); // NOI18N

        try{
            tahunComboBoxModel = buildPVTtahunComboBoxModel(profil);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }
        jComboBoxTahun.setModel(tahunComboBoxModel);
        jComboBoxTahun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTahunActionPerformed(evt);
            }
        });
        jComboBoxTahun.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxTahunPropertyChange(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.jLabel2.text")); // NOI18N

        jUnpaidPVT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jUnpaidPVT.setText(String.valueOf(unpaidPVT));
        jUnpaidPVT.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jUnpaidPVT.setEnabled(false);

        jTablePVT.setModel(tableModelPVT);
        jTablePVT.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTablePVT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTablePVTFocusLost(evt);
            }
        });
        jTablePVT.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTablePVTPropertyChange(evt);
            }
        });
        jScrollPane5.setViewportView(jTablePVT);

        jButtonBayarIUS.setText(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.jButtonBayarIUS.text")); // NOI18N
        jButtonBayarIUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBayarIUSActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.jLabel3.text")); // NOI18N

        jFormattedTextFieldIDDSaldo.setText(org.openide.util.NbBundle.getMessage(InputTransactionPVT.class, "InputTransactionPVT.jFormattedTextFieldIDDSaldo.text")); // NOI18N
        jFormattedTextFieldIDDSaldo.setEnabled(false);

        javax.swing.GroupLayout jPanelIPPLayout = new javax.swing.GroupLayout(jPanelIPP);
        jPanelIPP.setLayout(jPanelIPPLayout);
        jPanelIPPLayout.setHorizontalGroup(
            jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPLayout.createSequentialGroup()
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIPPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5))
                    .addGroup(jPanelIPPLayout.createSequentialGroup()
                        .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelIPPLayout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(jButtonBayarIUS))
                            .addGroup(jPanelIPPLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(29, 29, 29)
                                .addComponent(jLabelTahun)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTahun, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jUnpaidPVT, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jFormattedTextFieldIDDSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 33, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelIPPLayout.setVerticalGroup(
            jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPPLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTahun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTahun)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jUnpaidPVT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIPPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextFieldIDDSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBayarIUS)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelIPP, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelIPP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxTahunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTahunActionPerformed
        // TODO add your handling code here:
        try {
            this.tableModelPVT = (DefaultTableModel) buildPVTTableModel(this.profil, this.tahunPVT.get(jComboBoxTahun.getSelectedIndex()));
            jTablePVT.setModel(this.tableModelPVT);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (KasirException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxTahunActionPerformed

    private void jComboBoxTahunPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxTahunPropertyChange
        // TODO add your handling code here:
        try {
            if (this.jComboBoxTahun.getSelectedItem() != null) {
                this.tableModelPVT = (DefaultTableModel) buildPVTTableModel(this.profil, this.tahunPVT.get(jComboBoxTahun.getSelectedIndex()));
                jTablePVT.setModel(this.tableModelPVT);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Koneksi Error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            JOptionPane.showMessageDialog(rootPane, "PVT Belum Di Setting!\r\n".concat(ex.toString()));
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxTahunPropertyChange

    private void jTablePVTFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePVTFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTablePVTFocusLost

    private void jTablePVTPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTablePVTPropertyChange
        // TODO add your handling code here:
        //IDD, Beasiswa, Beasiswa Cost
        pVTAmounts = new ArrayList();
        iDDAmounts = new ArrayList();
        beasiswaAmounts = new ArrayList();
        beasiswaCostAmounts = new ArrayList();
        /////BLOOOOOOOOOOM SELESAIIIIIIIIIIIIIIIIIIII
        int i = 0;
        pvtCurrent = new PVT();
        pvtStoreToDB = new PVT();
        ArrayList<Entry> entry = new ArrayList<>();
        if (pvtFromDB.entries.size() != 0) {
            for (i = 0; i < jTablePVT.getRowCount(); i++) {
                pvtCurrent.entries.add((Boolean) jTablePVT.getValueAt(i, 2) ? ((pvtFromDB.entries.get(i).transactDetailIDs.size() > 0) ? new Entry(i, pvtFromDB.entries.get(i).amount, pvtFromDB.entries.get(i).debt, pvtFromDB.entries.get(i).transactDetailIDs) : new Entry(i, pvtFromDB.entries.get(i).amount)) : null);
                //below condition is when jTablePVT checkBox is UNCHECK ????
                if (pvtCurrent.entries.get(i) == null) {
                    pvtStoreToDB.entries.add(null);
                    jTablePVT.setValueAt(0f, i, 3);
                    jTablePVT.setValueAt(0f, i, 4);
                    jTablePVT.setValueAt(0f, i, 5);
                    jTablePVT.setValueAt(0f, i, 6);
                    pVTAmounts.add(0f);
                    iDDAmounts.add(0f);
                    beasiswaAmounts.add(0f);
                    beasiswaCostAmounts.add(0f);
                    //below is when jTablePVT property changed, especially check box is Changed or Editing IDD, Beasiswa, Beasiswa Cost 
                } else if ((pvtCurrent.entries.get(i) != null) ^ (pvtFromDB.entries.get(i).transactDetailIDs.size() > 0)) {
                    System.out.println("IDD dari db ");
                    if (idd != null) {
                        System.out.println(idd.amount);
                    }
                    pVTAmounts.add((Float) jTablePVT.getModel().getValueAt(i,3));
                    iDDAmounts.add((Float) jTablePVT.getValueAt(i, 4));
                    beasiswaAmounts.add((Float) jTablePVT.getValueAt(i, 5));
                    beasiswaCostAmounts.add((Float) jTablePVT.getValueAt(i, 6));
                    //jTablePVT.setValueAt(pvtFromDB.entries.get(i).amount - (iDDAmounts.get(i) + beasiswaAmounts.get(i) + beasiswaCostAmounts.get(i)), i, 3);
                    //pvtStoreToDB.entries.add(new Entry(i, pvtFromDB.entries.get(i).amount));
                    pvtStoreToDB.entries.add(new Entry(i, pVTAmounts.get(i)+iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i)));
                } else {
                    try {
                        if(isPVTEnough(pvtFromDB.entries.get(i).transactDetailIDs, pvtFromDB.entries.get(i).amount)){
                            pVTAmounts.add(0f);
                            iDDAmounts.add(0f);
                            beasiswaAmounts.add(0f);
                            beasiswaCostAmounts.add(0f);
                            pvtStoreToDB.entries.add(null);
                        }else{
                            pVTAmounts.add((Float) jTablePVT.getModel().getValueAt(i,3));
                            iDDAmounts.add((Float) jTablePVT.getValueAt(i, 4));
                            beasiswaAmounts.add((Float) jTablePVT.getValueAt(i, 5));
                            beasiswaCostAmounts.add((Float) jTablePVT.getValueAt(i, 6));
                            pvtStoreToDB.entries.add(new Entry(i, pVTAmounts.get(i)+iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i)));
                        }
                    } catch (SQLException ex) {
                        Exceptions.printStackTrace(ex);
                    } catch (KasirException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    

                }
                //pvtCurrent.entries.add((Boolean)jTablePVT.getValueAt(i,2)? new PVT(profil.noInduk, new Level(null,null,null,(Integer)jComboBoxTahun.getSelectedItem()),entry).entries.get(i): null);
                //pvtStoreToDB.entries.add(pvtCurrent.entries.get(i)==null?null:(((pvtCurrent.entries.get(i)!=null)^(pvtFromDB.entries.get(i)!=null))? new PVT(profil.noInduk, new Level(null,null,null,(int)jComboBoxTahun.getSelectedItem()),entry).entries.get(i):pvtCurrent.entries.get(i)));
                //System.out.println("PVT Period: "+pvtCurrent.entries.get(i).period);
            }
        }
    }//GEN-LAST:event_jTablePVTPropertyChange

    private void jButtonBayarIUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBayarIUSActionPerformed
        // TODO add your handling code here:
        float pvtAmountTemp = 0f;
        for (int i = 0; i < 1; i++) {
            if (pvtStoreToDB.entries.get(i) != null) {
                //pvtAmountTemp = pvtAmountTemp + pvtFromDB.entries.get(i).amount;
                pvtAmountTemp = pvtAmountTemp + (Float)jTablePVT.getModel().getValueAt(i,3)
                                +(Float)jTablePVT.getModel().getValueAt(i,4)
                                +(Float)jTablePVT.getModel().getValueAt(i,5)
                                +(Float)jTablePVT.getModel().getValueAt(i,6);
            }
        }
        itfs.jTextFieldPVTAmountSimple.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        itfs.jTextFieldPVTAmountSimple.setValue(pvtAmountTemp);
        try {
            itfs.jTextFieldPVTAmountSimple.commitEdit();
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        itfs.pvtCurrent = pvtCurrent;
        itfs.pvtFromDB = pvtFromDB;
        itfs.pvtStoreToDB = pvtStoreToDB;
        this.setVisible(false);

    }//GEN-LAST:event_jButtonBayarIUSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputTransactionFrameSeparated.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new InputTransactionPVT().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBayarIUS;
    public javax.swing.JComboBox jComboBoxTahun;
    private javax.swing.JFormattedTextField jFormattedTextFieldIDDSaldo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelTahun;
    private javax.swing.JPanel jPanelIPP;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JTable jTablePVT;
    private javax.swing.JTextField jUnpaidPVT;
    // End of variables declaration//GEN-END:variables

    public TableModel buildPVTTableModel(Profil profil, int tahun) throws SQLException, KasirException {
       String columnNames[] = {"Semester", "Biaya PVT", "Check Box", "Tunai", "Iuran Dibayar Dimuka", "Beasiswa", "Beasiswa Yayasan"};
       Set<PVT> pvtFilters = new HashSet<>();
       ArrayList<Entry> entries = new ArrayList<>();
       pvtFilters.clear();
       pvtFilters.add(new PVT(profil.noInduk, new Level(null,null,null,tahun), entries));
       Map<Long, PVT> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.PVT, pvtFilters);
       Object[][] data = new Object[1][7];
       int i = 0;
       final boolean[] canEdit = new boolean [1];
       pvtFromDB = new PVT();
       float amountPVTinTable;
       float amountPVTinTDetail;
       
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, PVT> entry: searchResultMap.entrySet()){
            for(int j =0 ; j< entry.getValue().entries.size(); j++){
                data[j][0]= namaBulan[j];//entry.getValue().entries.get(j).period;
                data[j][1]= entry.getValue().entries.get(j).amount - calculatePaidPVT(entry.getValue().entries.get(j).transactDetailIDs); // ANEH NIH MASA BEGINI, DI KALI DUA SIH?
                amountPVTinTable = entry.getValue().entries.get(j).amount;
                
                //if(jTable2 != null){data[j][2]= jTable2.getModel().getValueAt(j,2);}else{data[j][2]= new Boolean(false);}
                //if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                if(isPVTEnough(entry.getValue().entries.get(j).transactDetailIDs, amountPVTinTable)){        
//                    
                    data[j][2] = new Boolean(true);
                    Float data3 = 0f;
                    Float data4 = 0f;
                    Float data5 = 0f;
                    Float data6 = 0f;
                    
                    for(Long setTDetailIds:entry.getValue().entries.get(j).transactDetailIDs){
                        System.out.println(setTDetailIds + " Set TDetailsID");
                        if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.CASH){
                            data3 += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            data[j][3] = data3;
                        }
                        if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.IDD){
                            data4 += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            data[j][4] = data4;
                        }
                        if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA){
                            data5 += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            data[j][5] = data5;
                        }
                        if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA_COST){
                            data6 += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            data[j][6] = data6;
                        }
                    }
                    if(data[j][3] == null){
                        data[j][3] = 0f;
                    }
                    if(data[j][4] == null){
                        data[j][4] = 0f;
                    }
                    if(data[j][5] == null){
                        data[j][5] = 0f;
                    }
                    if(data[j][6] == null){
                        data[j][6] = 0f;
                    }
                            
                }else{
                    data[j][2] = new Boolean(false);
                    if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                        for(Long setTDetailIds:entry.getValue().entries.get(j).transactDetailIDs){
                            System.out.println(setTDetailIds + " Set TDetailsID");
                            if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.CASH){
                                data[j][3] = Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            }
                            if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.IDD){
                                data[j][4] = Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            }
                            if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA){
                                data[j][5] = Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            }
                            if(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).paymentMethod == TransactionDetail.PaymentMethod.BEASISWA_COST){
                                data[j][6] = Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, setTDetailIds).amount;
                            }
                        }
                        if(data[j][3] == null){
                        data[j][3] = 0f;
                        }
                        if(data[j][4] == null){
                            data[j][4] = 0f;
                        }
                        if(data[j][5] == null){
                            data[j][5] = 0f;
                        }
                        if(data[j][6] == null){
                            data[j][6] = 0f;
                        }
                    }else{
                        data[j][3]=0f;
                        data[j][4]=0f;
                        data[j][5]=0f;
                        data[j][6]=0f;
                    }
                }
                
                pvtFromDB.entries.add(entry.getValue().entries.get(j));
                //canEdit[j] = (entry.getValue().entries.get(j).transactDetailIDs.size() > 0);
                
                for(Long id : entry.getValue().entries.get(j).transactDetailIDs){
                    canEdit[j] = Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, id).settled;
                }
                
                
            }
            pvtFromDB.id = entry.getValue().id;
            pvtFromDB.noInduk = entry.getValue().noInduk;
            pvtFromDB.chargedLevel = entry.getValue().chargedLevel;
            i++;
        }
        TableModel tm = new DefaultTableModel(data, columnNames){
            boolean[] chooseEdit = new boolean[]{false,false,true,true,true,true,true};
            
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                if(!itfs.jDialogTransactionSummary.isVisible()){
                    if((Boolean)getValueAt(row, 2)){
                    //if((Float)getValueAt(row,1) == 0f){
                        if((column == 0 || column ==1)){
                            return column == 2;
                        //return false;
                        }
                        return !canEdit[row];
                    }
                    if((column == 0 && column ==1)|| column == 2){
                            //return column == 2;
                        return chooseEdit[column];
                    }

                    return false;
               }else{
                    return false;
                }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;
       }else{
           TableModel tm = new DefaultTableModel(data, columnNames);
           JOptionPane.showMessageDialog(rootPane, "PVT Belum Di Setting!\r\n");
           this.dispose();
           return null;
       }
       
       
    }
    public TableModel buildPVTSubmitTableModel(Profil profil, int tahun) throws SQLException, KasirException {
       String columnNames[] = {"PVT", "Biaya PVT", "Check Box", "Tunai", "Iuran Dibayar Dimuka", "Beasiswa", "Beasiswa Yayasan"};
       Object[][] data = new Object[1][7];
       
       final boolean[] canEdit = new boolean [1];
         
        for(int i = 0 ; i < pvtCurrent.entries.size(); i++){
                data[i][0]= namaBulan[i];//entry.getValue().entries.get(j).period;
                data[i][1]= pvtFromDB.entries.get(i).amount; // ANEH NIH MASA BEGINI, DI KALI DUA SIH?
                if(pvtCurrent.entries.get(i) != null){
//                    if(jTablePVT != null){
//                        data[j][2]=jTablePVT.getValueAt(j,2);
//                    }else{
                        data[i][2] = new Boolean(true);
//                        data[i][3] = pvtFromDB.entries.get(i).amount-(iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i));
                        data[i][3] = pVTAmounts.get(i);
                        data[i][4] = iDDAmounts.get(i);
                        data[i][5] = beasiswaAmounts.get(i);
                        data[i][6] = beasiswaCostAmounts.get(i);
//                    }
                }else{
//                    if(jTablePVT !=null){
//                        data[j][2]=jTablePVT.getValueAt(j,2);
//                    }else{
                        data[i][2] = new Boolean(false);
//                        data[i][3] = pvtFromDB.entries.get(i).amount-(iDDAmounts.get(i)+beasiswaAmounts.get(i)+beasiswaCostAmounts.get(i));
                        data[i][3] = pVTAmounts.get(i);
                        data[i][4] = iDDAmounts.get(i);
                        data[i][5] = beasiswaAmounts.get(i);
                        data[i][6] = beasiswaCostAmounts.get(i);
//                    }
                }
       }
       
       TableModel tm = new DefaultTableModel(data, columnNames){
            boolean[] chooseEdit = new boolean[]{false,false,true};
            
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                if(!itfs.jDialogTransactionSummary.isVisible()){
                    if((Boolean)getValueAt(row, 2)){
                        if((column == 0 || column ==1)){
                            return column == 2;
                        //return false;
                        }
                        return !canEdit[row];
                    }
                    if((column == 0 && column ==1)|| column == 2){
                            //return column == 2;
                        return chooseEdit[column];
                    }

                    return false;
               }else{
                    return false;
                }
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
       };
       
       return tm;
    }
    
private ComboBoxModel buildPVTtahunComboBoxModel(Profil profil) throws SQLException, KasirException {
       Set<PVT> pvtFilters = new HashSet<>();
       ArrayList<Entry> entries = new ArrayList();
       pvtFilters.add(new PVT(profil.noInduk, null, entries));
       Map<Long, PVT> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.PVT, pvtFilters);
       this.tahunPVT = new ArrayList<>();
       List<String> tahunAjaran = new ArrayList<>();
       Object[][] data = new Object[searchResultMap.size()][2];
       int i = 0;
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, PVT> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getValue().entries.get(i);
            data[i][1]= entry.getValue().entries.get(i).amount;
            this.tahunPVT.add(entry.getValue().chargedLevel.tahun);
            tahunAjaran.add(String.valueOf(entry.getValue().chargedLevel.tahun).concat(" - ").concat(String.valueOf(entry.getValue().chargedLevel.tahun+1)));
            i++;
        }
       }
       calculateUnpaidPVT(profil, tahunPVT);
       //== bikin tunggakan beans ===
       
       
       //== end bikin tunggakan beans ===
       
       tahunComboBoxModel = new DefaultComboBoxModel(tahunAjaran.toArray());
       return tahunComboBoxModel;
    }

private float calculateUnpaidPVT(Profil profil, List<Integer> tahuns) throws SQLException, KasirException {
       Set<PVT> pvtFilters = new HashSet<>();
       float retVal = 0;
       ArrayList<Entry> entries = new ArrayList<>();
       pvtFilters.clear();
       int targetMonth = Calendar.getInstance().get(Calendar.MONTH);
       int targetYear = Calendar.getInstance().get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       System.out.println("Month INT: "+Calendar.getInstance().get(Calendar.MONTH));
       for(int i = 0; i< tahuns.size(); i++){
           pvtFilters.add(new PVT(profil.noInduk, new Level(null,null,null,tahuns.get(i)), entries));
           
        }
       Map<Long, PVT> searchResultMap = Control.exactFilterSelectIurans(Iuran.Tipe.PVT, pvtFilters);
        if(searchResultMap.size() > 0){
            for(Map.Entry<Long, PVT> entry: searchResultMap.entrySet()){
                for(int j =0 ; j< entry.getValue().entries.size(); j++){
                    if((entry.getValue().entries.get(j).transactDetailIDs.isEmpty()) 
                            && ((entry.getValue().chargedLevel.tahun < targetYear)? true:(entry.getValue().entries.get(j).period <= targetMonth))){
                        retVal += entry.getValue().entries.get(j).amount;
                    }else if(entry.getValue().entries.get(j).transactDetailIDs.size() > 0){
                        Float temp = 0f;
                        for(Long l : entry.getValue().entries.get(j).transactDetailIDs){
                            temp += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, l).amount;
                        }
                        if(temp < entry.getValue().entries.get(j).amount){
                            retVal += entry.getValue().entries.get(j).amount-temp;
                        } 
                    }
                }
            }
        }
       unpaidPVT = retVal;
       return retVal;
    }
    
    public ArrayList<TunggakanBean> calculateUnpaidPVTs(ArrayList<Profil> profils, List<Integer> tahuns) throws SQLException, KasirException {
       Set<PVT> pvtFilters = new HashSet<>();
       ArrayList<TunggakanBean> retVals = new ArrayList<>();
       float retVal = 0;
       ArrayList<Entry> entries = new ArrayList<>();
       pvtFilters.clear();
       int targetMonth = Calendar.getInstance().get(Calendar.MONTH);
       int targetYear = Calendar.getInstance().get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       System.out.println("Month INT: "+Calendar.getInstance().get(Calendar.MONTH));
       ArrayList<String> noInduks = new ArrayList<>();
       for(int i = 0; i< profils.size() ; i++){
           noInduks.add(profils.get(i).noInduk);
            for(int j = 0; j< tahuns.size(); j++){
                pvtFilters.add(new PVT(profils.get(i).noInduk, new Level(null,null,null,tahuns.get(j)), entries));

            }
       }
       List<PVT> test = Control.selectIurans(Iuran.Tipe.PVT, PVT.noIndukColName, false, noInduks.toArray(new String[0]));
       
       for(int i = 0 ; i< test.size(); i++){
           TunggakanBean tb = new TunggakanBean();
           for(int j = 0 ; j < test.get(i).entries.size(); j++){
               if(j==0) retVal=0;
               Float totalAmountPVTTDetails = 0f;
               for(Long l : test.get(i).entries.get(j).transactDetailIDs){
                   totalAmountPVTTDetails += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, l).amount;
               }
               if((totalAmountPVTTDetails < test.get(i).entries.get(j).amount)
                   && ((test.get(i).chargedLevel.tahun < targetYear? true: (test.get(i).entries.get(j).period <= targetMonth)))){
                    
                            
                            retVal += test.get(i).entries.get(j).amount-totalAmountPVTTDetails;
                            tunggakanPVTString = tunggakanPVTString.concat("PVT Semester ");
                            tunggakanPVTString = tunggakanPVTString.concat(getMonthName(test.get(i).entries.get(j).period));
                            tunggakanPVTString = tunggakanPVTString.concat(" "+String.valueOf(test.get(i).chargedLevel.tahun)+"/"+String.valueOf(1+test.get(i).chargedLevel.tahun));
                            tunggakanPVTString = tunggakanPVTString.concat("\r\n");
                            
                            tunggakanPVTEachAmountString = tunggakanPVTEachAmountString.concat("Rp. ");
                            tunggakanPVTEachAmountString = tunggakanPVTEachAmountString.concat(String.valueOf(Math.round(test.get(i).entries.get(j).amount-totalAmountPVTTDetails)));
                            tunggakanPVTEachAmountString = tunggakanPVTEachAmountString.concat("\r\n");
               }
               
                
               
               
           }
           tb.setProfil(profils.get(i));
           tb.setTunggakanPVT(retVal);
           retVals.add(tb);
           System.out.println(test.get(i).noInduk);
       }
       unpaidPVT = retVal;
       return retVals;
    }
   
    private String getMonthName(int p){
        String ret;
        switch(p){
            case 1: ret = "PVT";
                break;
            default: ret = "Invalid";
                break;
        }
        return ret;
        
    }

    public boolean isPVTEnough(Set<Long> transactDetailIDs, float amountPVTinTable) throws SQLException, KasirException {
        Float totalAmountTDetail = 0f;
        for(Long l : transactDetailIDs){
            totalAmountTDetail += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, l).amount;
        }
        if(totalAmountTDetail < amountPVTinTable){
            return false;
        }else{
            return true;
        }
    }
    
    
    public float calculatePaidPVT(Set<Long> transactDetailIDs) throws SQLException, KasirException{
        Float retVal = 0f;
        for(Long l: transactDetailIDs){
            retVal += Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, l).amount;
        }
        return retVal;
    }
    
}
