package iuran;import java.sql.*;import java.util.*;import kasir.*;import org.apache.commons.lang3.StringUtils;import sak.*;public class TransactionSummary extends KasirObject<TransactionSummary, TransactionSummary, Long>{    public static final String tableName = "TransactionSummary";    public static final String idColName = "ID", uuidColName = "UUID", noIndukColName = "NomorInduk", idClerkColName = "IDClerk", createDateColName = "CreateDate";    public static final String lastUpdateDateColName = "LastUpdateDate", totalAmountColName = "TotalAmount", noteColName = "Note";        public enum C{        ID("ID", long.class, Control.DBType.BIGINT), UUID("UUID", String.class, Control.DBType.VARCHAR), NOINDUK("NomorInduk", String.class, Control.DBType.VARCHAR), IDCLERK("IDClerk", int.class, Control.DBType.INT), CDATE("CreateDate", Kalender.class, Control.DBType.TIMESTAMP), LUDATE("LastUpdateDate", Kalender.class, Control.DBType.TIMESTAMP), TOTALAMOUNT("TotalAmount", float.class, Control.DBType.FLOAT), NOTE("Note", String.class, Control.DBType.VARCHAR);                public String CN;        public Class jType;        public Control.DBType dbType;                private C(String cn, Class jType, Control.DBType dbType){            CN = cn;        }    }        public long id;  //db-primary-key    public UUID uuid;    public String noInduk;  //db-not-null    public int idClerk;  //db-not-null    public Kalender createDate;  //non-null    public Kalender lastUpdateDate;  //non-null    public float totalAmount;  //db-not-null    public String note;    public Kalender createDateS;    public Kalender createDateE;    public Kalender lastUpdateDateS;    public Kalender lastUpdateDateE;            //for filter    public TransactionSummary(UUID uuid, String noInduk, int clerkID, Kalender cDate, Kalender luDate, float totalAmount, String note){        this.uuid = uuid;        this.noInduk = noInduk;        idClerk = clerkID;        createDate = cDate;        lastUpdateDate = luDate;        this.totalAmount = totalAmount;        this.note = note;    }        //for insertion    public TransactionSummary(UUID uuid, String noInduk, int clerkID, float totalAmount, String note){        this(uuid, noInduk, clerkID, null, null, totalAmount, note);                       long curMS = System.currentTimeMillis();        createDate = new Kalender(curMS);        lastUpdateDate = new Kalender(curMS);    }        //for from db    public TransactionSummary(){}        public TransactionSummary(TransactionSummary ts){        this(ts.uuid, ts.noInduk, ts.idClerk, ts.createDate, ts.lastUpdateDate, ts.totalAmount, ts.note);        id = ts.id;            }        public static String toStringHeader(){        String tmp = idColName + "|" + noIndukColName + "|" + idClerkColName + "|" + createDateColName + "|" + lastUpdateDateColName;        return tmp + "|" + totalAmountColName + "|" + noteColName;    }    public String toString(){        return id + "|" + noInduk + "|" + idClerk + "|" + createDate + "|" + lastUpdateDate + "|" + totalAmount + "|" + note;    }    public boolean equals(TransactionSummary ts){        boolean tmp = id == ts.id && noInduk.equalsIgnoreCase(ts.noInduk) && idClerk == ts.idClerk && createDate.equals(ts.createDate);        return tmp && lastUpdateDate.equals(ts.lastUpdateDate) && totalAmount == ts.totalAmount && note.equals(ts.note);    }        //==============================================================    public boolean isInsertDBValid(){        return noInduk != null && !noInduk.isEmpty() && idClerk > 0 && totalAmount >= 0;    }    public boolean isDBValid(){        return id > 0 && isInsertDBValid();    }        public Long getKey(){        return id;    }        public TransactionSummary dynFromResultSet(ResultSet rs, boolean onCallingObj) throws SQLException, KasirException{        assert !rs.isBeforeFirst();                TransactionSummary ts = onCallingObj? this : new TransactionSummary();                ts.id = rs.getLong(idColName);        ts.uuid = UUID.fromString(rs.getString(uuidColName));        ts.noInduk = rs.getString(noIndukColName);        ts.idClerk = rs.getInt(idClerkColName);        ts.createDate = Kalender.fromResultSet(rs, createDateColName);        ts.lastUpdateDate = Kalender.fromResultSet(rs, lastUpdateDateColName);        ts.totalAmount = rs.getFloat(totalAmountColName);        ts.note = rs.getString(noteColName);                if(ts.isDBValid())            return ts;        else            throw new KasirException(KasirException.Tipe.BAD_RECORD, this);    }        public static TransactionSummary fromResultSet(ResultSet rs) throws SQLException, KasirException{        return new TransactionSummary().dynFromResultSet(rs, true);    }    public static TransactionSummary fromResultSet(ResultSet rs, long id) throws SQLException, KasirException{        if(DBSR.searchRow(rs, noIndukColName, id) > 0)            return fromResultSet(rs);        else            throw new KasirException(KasirException.Tipe.ROW_NOT_FOUND, id);    }    public static TransactionSummary fromResultSet(ResultSet rs, String colName, Number val) throws SQLException, KasirException{        if(DBSR.searchRow(rs, colName, val) > 0)            return fromResultSet(rs);        else            throw new KasirException(KasirException.Tipe.ROW_NOT_FOUND, val);    }    public static TransactionSummary fromResultSet(ResultSet rs, String colName, boolean caseSensitive, String val) throws SQLException, KasirException{        if(DBSR.searchRow(rs, colName, caseSensitive, val) > 0)            return fromResultSet(rs);        else            throw new KasirException(KasirException.Tipe.ROW_NOT_FOUND, val);    }    public boolean flushResultSet(ResultSet rs, boolean flushCreateDate) throws SQLException{        rs.updateString(uuidColName, uuid.toString());        rs.updateString(noIndukColName, noInduk);        rs.updateInt(idClerkColName, idClerk);                if(flushCreateDate)            createDate.flushResultSet(rs, createDateColName);        lastUpdateDate.flushResultSet(rs, lastUpdateDateColName);                rs.updateFloat(totalAmountColName, totalAmount);        rs.updateString(noteColName, note);        return true;    }    public boolean insertResultSet(ResultSet rs) throws SQLException, KasirException{        if(isInsertDBValid())            return flushResultSet(rs, true);        else            throw new KasirException(KasirException.Tipe.DB_INVALID, this);    }        public boolean updateResultSet(ResultSet rs) throws SQLException, KasirException{         if(!isDBValid())             throw new KasirException(KasirException.Tipe.DB_INVALID, this);         if(DBSR.searchRow(rs, idColName, id) > 0)             return flushResultSet(rs, false);         else             throw new KasirException(KasirException.Tipe.ROW_NOT_FOUND, this);     }        public String asWhereClause(){        LinkedList<String> whereClause = new LinkedList<>();                if(noInduk != null && !noInduk.isEmpty())            whereClause.add(noIndukColName + " LIKE '%" + noInduk + "%'");        if(idClerk > 0)            whereClause.add(idClerkColName + " = '" + idClerk + "'");                if(createDate != null){            String wc = createDate.asWhereClause(false);            if(wc != null && !wc.isEmpty())                whereClause.add(createDateColName + " LIKE '%" + wc + "%'");        }                if(lastUpdateDate != null){            String wc = lastUpdateDate.asWhereClause(false);            if(wc != null && !wc.isEmpty())                whereClause.add(lastUpdateDateColName + " LIKE '%" + wc + "%'");        }                if(createDateS !=null){            String wc = createDateS.asWhereClause(true);            if(wc != null && !wc.isEmpty())                whereClause.add(createDateColName + " >= '" + wc + "'");        }                if(createDateE !=null){            String wc = createDateE.asWhereClause(true);            if(wc != null && !wc.isEmpty())                whereClause.add(createDateColName + " <= '" + wc + "'");        }                if(lastUpdateDateS !=null){            String wc = lastUpdateDateS.asWhereClause(true);            if(wc != null && !wc.isEmpty())                whereClause.add(lastUpdateDateColName + " >= '" + wc + "'");        }                if(lastUpdateDateE !=null){            String wc = lastUpdateDateE.asWhereClause(true);            if(wc != null && !wc.isEmpty())                whereClause.add(lastUpdateDateColName + " =< '" + wc + "'");        }        //        if(totalAmount >= 0)//            whereClause.add(totalAmountColName + " = '" + totalAmount + "'");//        if(note != null & !note.isEmpty())//            whereClause.add(noteColName + " LIKE '%" + note + "'");                return whereClause.isEmpty()? null : StringUtils.join(whereClause, " AND ");    }    public String asWhereClauseExact(){        LinkedList<String> whereClause = new LinkedList<>();                if(noInduk != null && !noInduk.isEmpty())            whereClause.add(noIndukColName + " = '" + noInduk + "'");        if(idClerk > 0)            whereClause.add(idClerkColName + " = '" + idClerk + "'");                if(createDate != null){            String wc = createDate.asWhereClause(false);            if(wc != null && !wc.isEmpty())                whereClause.add(createDateColName + " = '" + wc + "'");        }                if(lastUpdateDate != null){            String wc = lastUpdateDate.asWhereClause(false);            if(wc != null && !wc.isEmpty())                whereClause.add(lastUpdateDateColName + " = '" + wc + "'");        }                if(totalAmount >= 0)            whereClause.add(totalAmountColName + " = '" + totalAmount + "'");        if(note != null & !note.isEmpty())            whereClause.add(noteColName + " LIKE '%" + note + "'");                return whereClause.isEmpty()? null : StringUtils.join(whereClause, " AND ");    }            //====================================    public static TransactionSummary select(String colName, Number val) throws SQLException, KasirException{        ResultSet rs = DBSR.takeResultSetByNumber(TransactionSummary.tableName, colName, 1, val);        return TransactionSummary.fromResultSet(rs, colName, val);    }    public static TransactionSummary select(String colName, boolean caseSensitive, String val) throws SQLException, KasirException{        ResultSet rs = DBSR.takeResultSetByString(TransactionSummary.tableName, colName, -1, val);        return TransactionSummary.fromResultSet(rs, colName, caseSensitive, val);    }    public static TransactionSummary select(long id) throws SQLException, KasirException{        assert id > 0;                return select(idColName, id);    }        public static Map<Long,TransactionSummary> selectS(Set<Long> ids) throws SQLException, KasirException{        ResultSet rs;        Map<Long,TransactionSummary> idTSummary;        if(ids == null){            rs = DBSR.takeResultSetByNumberColl(tableName, idColName, -1, null);            idTSummary = new HashMap<>(DBSR.rowCountRS(rs));                            rs.beforeFirst();            while(rs.next()){                TransactionSummary ts = fromResultSet(rs);                idTSummary.put(ts.id, ts);            }        }else{            Set<Long> validId = new HashSet<>();            for(Long id : ids){                if(id > 0)                    validId.add(id);            }            rs = DBSR.takeResultSetByNumberColl(tableName, idColName, -1, validId);            idTSummary = new HashMap<>(validId.size());                            for(Long id : validId){                try{                    idTSummary.put(id, TransactionSummary.fromResultSet(rs, id));                }catch(KasirException e){                    idTSummary.put(id, null);                }            }        }        return idTSummary;    }    public static TransactionSummary filterSelect(Filter<TransactionSummary> filter) throws SQLException, KasirException{        ResultSet rs = DBSR.takeResultSetByFilter(tableName, null, 1, filter);        if(rs.next())            return fromResultSet(rs);        else            throw new KasirException(KasirException.Tipe.ROW_NOT_FOUND, filter);    }    public static Map<Long,TransactionSummary> filterSelectS(Set<? extends Filter<TransactionSummary>> filters) throws SQLException, KasirException{        ResultSet rs;        if(filters == null)            rs = DBSR.takeResultSetByFilterColl(tableName, null, -1, null);        else{            //remove null filters / filters with empty asWhereClause, so BAD_RECORD is only detected if filters = null            //arg filters isn't modified            Set<Filter<TransactionSummary>> validFilters = new HashSet<>();            for(Filter<TransactionSummary> filter : filters){                if(filter != null && !"".equals(filter.asWhereClause()))                    validFilters.add(filter);            }            rs = DBSR.takeResultSetByFilterColl(tableName, null, -1, validFilters);        }                                Map<Long,TransactionSummary> idTSummary = new HashMap<>(DBSR.rowCountRS(rs));        rs.beforeFirst();        while(rs.next()){            TransactionSummary ts = fromResultSet(rs);            idTSummary.put(ts.id, ts);        }        return idTSummary;    }    public boolean insert() throws SQLException, KasirException{        return DBSR.insertKasirO(tableName, idColName, this);    }    public boolean update() throws SQLException, KasirException{        return DBSR.updateKasirO(tableName, idColName, this);    }    public static boolean delete(long id) throws SQLException, KasirException{        return DBSR.deleteKasirO(tableName, idColName, id);    }    public static int deleteS(Set<Long> ids) throws SQLException{        return DBSR.deleteKasirOsByNumber(tableName, idColName, ids);    }    public static int deleteS(ArrayList<TransactionSummary> tSummaries) throws SQLException{        Set<Long> ids = new HashSet<>(tSummaries.size());        for(TransactionSummary ts : tSummaries)            ids.add(ts.id);        return deleteS(ids);    }}